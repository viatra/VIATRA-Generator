/**
 * generated by Xtext 2.21.0
 */
package hu.bme.mit.inf.dslreasoner.application.applicationConfiguration.impl;

import hu.bme.mit.inf.dslreasoner.application.applicationConfiguration.ApplicationConfigurationPackage;
import hu.bme.mit.inf.dslreasoner.application.applicationConfiguration.ExactNumber;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Exact Number</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link hu.bme.mit.inf.dslreasoner.application.applicationConfiguration.impl.ExactNumberImpl#getExactNumber <em>Exact Number</em>}</li>
 *   <li>{@link hu.bme.mit.inf.dslreasoner.application.applicationConfiguration.impl.ExactNumberImpl#isExactUnlimited <em>Exact Unlimited</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExactNumberImpl extends NumberSpecificationImpl implements ExactNumber
{
  /**
   * The default value of the '{@link #getExactNumber() <em>Exact Number</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExactNumber()
   * @generated
   * @ordered
   */
  protected static final int EXACT_NUMBER_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getExactNumber() <em>Exact Number</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExactNumber()
   * @generated
   * @ordered
   */
  protected int exactNumber = EXACT_NUMBER_EDEFAULT;

  /**
   * The default value of the '{@link #isExactUnlimited() <em>Exact Unlimited</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isExactUnlimited()
   * @generated
   * @ordered
   */
  protected static final boolean EXACT_UNLIMITED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isExactUnlimited() <em>Exact Unlimited</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isExactUnlimited()
   * @generated
   * @ordered
   */
  protected boolean exactUnlimited = EXACT_UNLIMITED_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExactNumberImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ApplicationConfigurationPackage.Literals.EXACT_NUMBER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getExactNumber()
  {
    return exactNumber;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExactNumber(int newExactNumber)
  {
    int oldExactNumber = exactNumber;
    exactNumber = newExactNumber;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ApplicationConfigurationPackage.EXACT_NUMBER__EXACT_NUMBER, oldExactNumber, exactNumber));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isExactUnlimited()
  {
    return exactUnlimited;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExactUnlimited(boolean newExactUnlimited)
  {
    boolean oldExactUnlimited = exactUnlimited;
    exactUnlimited = newExactUnlimited;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ApplicationConfigurationPackage.EXACT_NUMBER__EXACT_UNLIMITED, oldExactUnlimited, exactUnlimited));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ApplicationConfigurationPackage.EXACT_NUMBER__EXACT_NUMBER:
        return getExactNumber();
      case ApplicationConfigurationPackage.EXACT_NUMBER__EXACT_UNLIMITED:
        return isExactUnlimited();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ApplicationConfigurationPackage.EXACT_NUMBER__EXACT_NUMBER:
        setExactNumber((Integer)newValue);
        return;
      case ApplicationConfigurationPackage.EXACT_NUMBER__EXACT_UNLIMITED:
        setExactUnlimited((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ApplicationConfigurationPackage.EXACT_NUMBER__EXACT_NUMBER:
        setExactNumber(EXACT_NUMBER_EDEFAULT);
        return;
      case ApplicationConfigurationPackage.EXACT_NUMBER__EXACT_UNLIMITED:
        setExactUnlimited(EXACT_UNLIMITED_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ApplicationConfigurationPackage.EXACT_NUMBER__EXACT_NUMBER:
        return exactNumber != EXACT_NUMBER_EDEFAULT;
      case ApplicationConfigurationPackage.EXACT_NUMBER__EXACT_UNLIMITED:
        return exactUnlimited != EXACT_UNLIMITED_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (exactNumber: ");
    result.append(exactNumber);
    result.append(", exactUnlimited: ");
    result.append(exactUnlimited);
    result.append(')');
    return result.toString();
  }

} //ExactNumberImpl
