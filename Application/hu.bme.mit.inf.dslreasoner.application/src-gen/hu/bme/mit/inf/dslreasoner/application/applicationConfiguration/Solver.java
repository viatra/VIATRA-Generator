/**
 * generated by Xtext 2.21.0
 */
package hu.bme.mit.inf.dslreasoner.application.applicationConfiguration;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>Solver</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see hu.bme.mit.inf.dslreasoner.application.applicationConfiguration.ApplicationConfigurationPackage#getSolver()
 * @model
 * @generated
 */
public enum Solver implements Enumerator
{
  /**
   * The '<em><b>SMT Solver</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #SMT_SOLVER_VALUE
   * @generated
   * @ordered
   */
  SMT_SOLVER(0, "SMTSolver", "SMTSolver"),

  /**
   * The '<em><b>Alloy Solver</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #ALLOY_SOLVER_VALUE
   * @generated
   * @ordered
   */
  ALLOY_SOLVER(1, "AlloySolver", "AlloySolver"),

  /**
   * The '<em><b>Viatra Solver</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #VIATRA_SOLVER_VALUE
   * @generated
   * @ordered
   */
  VIATRA_SOLVER(2, "ViatraSolver", "ViatraSolver"),

  /**
   * The '<em><b>TPTP Solver</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #TPTP_SOLVER_VALUE
   * @generated
   * @ordered
   */
  TPTP_SOLVER(3, "TPTPSolver", "TPTPSolver");

  /**
   * The '<em><b>SMT Solver</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #SMT_SOLVER
   * @model name="SMTSolver"
   * @generated
   * @ordered
   */
  public static final int SMT_SOLVER_VALUE = 0;

  /**
   * The '<em><b>Alloy Solver</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #ALLOY_SOLVER
   * @model name="AlloySolver"
   * @generated
   * @ordered
   */
  public static final int ALLOY_SOLVER_VALUE = 1;

  /**
   * The '<em><b>Viatra Solver</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #VIATRA_SOLVER
   * @model name="ViatraSolver"
   * @generated
   * @ordered
   */
  public static final int VIATRA_SOLVER_VALUE = 2;

  /**
   * The '<em><b>TPTP Solver</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #TPTP_SOLVER
   * @model name="TPTPSolver"
   * @generated
   * @ordered
   */
  public static final int TPTP_SOLVER_VALUE = 3;

  /**
   * An array of all the '<em><b>Solver</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static final Solver[] VALUES_ARRAY =
    new Solver[]
    {
      SMT_SOLVER,
      ALLOY_SOLVER,
      VIATRA_SOLVER,
      TPTP_SOLVER,
    };

  /**
   * A public read-only list of all the '<em><b>Solver</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final List<Solver> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  /**
   * Returns the '<em><b>Solver</b></em>' literal with the specified literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param literal the literal.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static Solver get(String literal)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      Solver result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Solver</b></em>' literal with the specified name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param name the name.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static Solver getByName(String name)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      Solver result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Solver</b></em>' literal with the specified integer value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the integer value.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static Solver get(int value)
  {
    switch (value)
    {
      case SMT_SOLVER_VALUE: return SMT_SOLVER;
      case ALLOY_SOLVER_VALUE: return ALLOY_SOLVER;
      case VIATRA_SOLVER_VALUE: return VIATRA_SOLVER;
      case TPTP_SOLVER_VALUE: return TPTP_SOLVER;
    }
    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final int value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String literal;

  /**
   * Only this class can construct instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private Solver(int value, String name, String literal)
  {
    this.value = value;
    this.name = name;
    this.literal = literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLiteral()
  {
    return literal;
  }

  /**
   * Returns the literal value of the enumerator, which is its string representation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    return literal;
  }
  
} //Solver
