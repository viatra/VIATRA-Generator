/*
 * generated by Xtext 2.21.0
 */
package hu.bme.mit.inf.dslreasoner.application.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ApplicationConfigurationGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ConfigurationScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.ConfigurationScript");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cCommandsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommandsCommandParserRuleCall_1_0 = (RuleCall)cCommandsAssignment_1.eContents().get(0);
		
		//ConfigurationScript:
		//	imports+=Import*
		//	commands+=Command*;
		@Override public ParserRule getRule() { return rule; }
		
		//imports+=Import* commands+=Command*
		public Group getGroup() { return cGroup; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment_1() { return cCommandsAssignment_1; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_1_0() { return cCommandsCommandParserRuleCall_1_0; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTaskParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Command:
		//	Declaration | Task;
		@Override public ParserRule getRule() { return rule; }
		
		//Declaration | Task
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Declaration
		public RuleCall getDeclarationParserRuleCall_0() { return cDeclarationParserRuleCall_0; }
		
		//Task
		public RuleCall getTaskParserRuleCall_1() { return cTaskParserRuleCall_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class REALLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.REALLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//REALLiteral ecore::EBigDecimal:
		//	'-'? INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
	}
	public class INTLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.INTLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//INTLiteral ecore::EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.Import");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEPackageImportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cViatraImportParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/////////////////////////////////////////////////////
		//// Imports
		/////////////////////////////////////////////////////
		//Import:
		//	EPackageImport | ViatraImport;
		@Override public ParserRule getRule() { return rule; }
		
		//EPackageImport | ViatraImport
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EPackageImport
		public RuleCall getEPackageImportParserRuleCall_0() { return cEPackageImportParserRuleCall_0; }
		
		//ViatraImport
		public RuleCall getViatraImportParserRuleCall_1() { return cViatraImportParserRuleCall_1; }
	}
	public class EPackageImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.EPackageImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEpackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cImportedPackageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cImportedPackageEPackageCrossReference_2_0 = (CrossReference)cImportedPackageAssignment_2.eContents().get(0);
		private final RuleCall cImportedPackageEPackageSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cImportedPackageEPackageCrossReference_2_0.eContents().get(1);
		
		//EPackageImport:
		//	"import" "epackage" importedPackage=[ecore::EPackage|STRING];
		@Override public ParserRule getRule() { return rule; }
		
		//"import" "epackage" importedPackage=[ecore::EPackage|STRING]
		public Group getGroup() { return cGroup; }
		
		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//"epackage"
		public Keyword getEpackageKeyword_1() { return cEpackageKeyword_1; }
		
		//importedPackage=[ecore::EPackage|STRING]
		public Assignment getImportedPackageAssignment_2() { return cImportedPackageAssignment_2; }
		
		//[ecore::EPackage|STRING]
		public CrossReference getImportedPackageEPackageCrossReference_2_0() { return cImportedPackageEPackageCrossReference_2_0; }
		
		//STRING
		public RuleCall getImportedPackageEPackageSTRINGTerminalRuleCall_2_0_1() { return cImportedPackageEPackageSTRINGTerminalRuleCall_2_0_1; }
	}
	public class ViatraImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.ViatraImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cViatraKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cImportedViatraAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cImportedViatraPatternModelCrossReference_2_0 = (CrossReference)cImportedViatraAssignment_2.eContents().get(0);
		private final RuleCall cImportedViatraPatternModelSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cImportedViatraPatternModelCrossReference_2_0.eContents().get(1);
		
		//ViatraImport:
		//	"import" "viatra" importedViatra=[viatra::PatternModel|STRING];
		@Override public ParserRule getRule() { return rule; }
		
		//"import" "viatra" importedViatra=[viatra::PatternModel|STRING]
		public Group getGroup() { return cGroup; }
		
		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//"viatra"
		public Keyword getViatraKeyword_1() { return cViatraKeyword_1; }
		
		//importedViatra=[viatra::PatternModel|STRING]
		public Assignment getImportedViatraAssignment_2() { return cImportedViatraAssignment_2; }
		
		//[viatra::PatternModel|STRING]
		public CrossReference getImportedViatraPatternModelCrossReference_2_0() { return cImportedViatraPatternModelCrossReference_2_0; }
		
		//STRING
		public RuleCall getImportedViatraPatternModelSTRINGTerminalRuleCall_2_0_1() { return cImportedViatraPatternModelSTRINGTerminalRuleCall_2_0_1; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFileDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMetamodelDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPartialModelDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGraphPatternDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConfigDeclarationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cScopeDeclarationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		/////////////////////////////////////////////////////
		//// Declaration
		/////////////////////////////////////////////////////
		//Declaration:
		//	FileDeclaration
		//	| MetamodelDeclaration
		//	| PartialModelDeclaration
		//	| GraphPatternDeclaration
		//	| ConfigDeclaration
		//	| ScopeDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//FileDeclaration | MetamodelDeclaration | PartialModelDeclaration | GraphPatternDeclaration | ConfigDeclaration |
		//ScopeDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FileDeclaration
		public RuleCall getFileDeclarationParserRuleCall_0() { return cFileDeclarationParserRuleCall_0; }
		
		//MetamodelDeclaration
		public RuleCall getMetamodelDeclarationParserRuleCall_1() { return cMetamodelDeclarationParserRuleCall_1; }
		
		//PartialModelDeclaration
		public RuleCall getPartialModelDeclarationParserRuleCall_2() { return cPartialModelDeclarationParserRuleCall_2; }
		
		//GraphPatternDeclaration
		public RuleCall getGraphPatternDeclarationParserRuleCall_3() { return cGraphPatternDeclarationParserRuleCall_3; }
		
		//ConfigDeclaration
		public RuleCall getConfigDeclarationParserRuleCall_4() { return cConfigDeclarationParserRuleCall_4; }
		
		//ScopeDeclaration
		public RuleCall getScopeDeclarationParserRuleCall_5() { return cScopeDeclarationParserRuleCall_5; }
	}
	public class FileSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.FileSpecification");
		private final Assignment cPathAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPathSTRINGTerminalRuleCall_0 = (RuleCall)cPathAssignment.eContents().get(0);
		
		/////////////////////////////////////////////////////
		//// Files and Folders
		/////////////////////////////////////////////////////
		//FileSpecification:
		//	path=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//path=STRING
		public Assignment getPathAssignment() { return cPathAssignment; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_0() { return cPathSTRINGTerminalRuleCall_0; }
	}
	public class FileDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.FileDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSpecificationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSpecificationFileSpecificationParserRuleCall_3_0 = (RuleCall)cSpecificationAssignment_3.eContents().get(0);
		
		//FileDeclaration:
		//	'file' name=ID '=' specification=FileSpecification;
		@Override public ParserRule getRule() { return rule; }
		
		//'file' name=ID '=' specification=FileSpecification
		public Group getGroup() { return cGroup; }
		
		//'file'
		public Keyword getFileKeyword_0() { return cFileKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//specification=FileSpecification
		public Assignment getSpecificationAssignment_3() { return cSpecificationAssignment_3; }
		
		//FileSpecification
		public RuleCall getSpecificationFileSpecificationParserRuleCall_3_0() { return cSpecificationFileSpecificationParserRuleCall_3_0; }
	}
	public class FileReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.FileReference");
		private final Assignment cReferredAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cReferredFileDeclarationCrossReference_0 = (CrossReference)cReferredAssignment.eContents().get(0);
		private final RuleCall cReferredFileDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cReferredFileDeclarationCrossReference_0.eContents().get(1);
		
		//FileReference:
		//	referred=[FileDeclaration];
		@Override public ParserRule getRule() { return rule; }
		
		//referred=[FileDeclaration]
		public Assignment getReferredAssignment() { return cReferredAssignment; }
		
		//[FileDeclaration]
		public CrossReference getReferredFileDeclarationCrossReference_0() { return cReferredFileDeclarationCrossReference_0; }
		
		//ID
		public RuleCall getReferredFileDeclarationIDTerminalRuleCall_0_1() { return cReferredFileDeclarationIDTerminalRuleCall_0_1; }
	}
	public class FileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.File");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFileSpecificationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFileReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//File:
		//	FileSpecification | FileReference;
		@Override public ParserRule getRule() { return rule; }
		
		//FileSpecification | FileReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FileSpecification
		public RuleCall getFileSpecificationParserRuleCall_0() { return cFileSpecificationParserRuleCall_0; }
		
		//FileReference
		public RuleCall getFileReferenceParserRuleCall_1() { return cFileReferenceParserRuleCall_1; }
	}
	public class MetamodelSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.MetamodelSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEntriesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEntriesMetamodelEntryParserRuleCall_1_0 = (RuleCall)cEntriesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEntriesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEntriesMetamodelEntryParserRuleCall_2_1_0 = (RuleCall)cEntriesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		/////////////////////////////////////////////////////
		//// Metamodel
		/////////////////////////////////////////////////////
		//MetamodelSpecification:
		//	'{' entries+=MetamodelEntry (',' entries+=MetamodelEntry)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' entries+=MetamodelEntry (',' entries+=MetamodelEntry)* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//entries+=MetamodelEntry
		public Assignment getEntriesAssignment_1() { return cEntriesAssignment_1; }
		
		//MetamodelEntry
		public RuleCall getEntriesMetamodelEntryParserRuleCall_1_0() { return cEntriesMetamodelEntryParserRuleCall_1_0; }
		
		//(',' entries+=MetamodelEntry)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//entries+=MetamodelEntry
		public Assignment getEntriesAssignment_2_1() { return cEntriesAssignment_2_1; }
		
		//MetamodelEntry
		public RuleCall getEntriesMetamodelEntryParserRuleCall_2_1_0() { return cEntriesMetamodelEntryParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class MetamodelEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.MetamodelEntry");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMetamodelElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAllPackageEntryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MetamodelEntry:
		//	MetamodelElement | AllPackageEntry;
		@Override public ParserRule getRule() { return rule; }
		
		//MetamodelElement | AllPackageEntry
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MetamodelElement
		public RuleCall getMetamodelElementParserRuleCall_0() { return cMetamodelElementParserRuleCall_0; }
		
		//AllPackageEntry
		public RuleCall getAllPackageEntryParserRuleCall_1() { return cAllPackageEntryParserRuleCall_1; }
	}
	public class AllPackageEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.AllPackageEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPackageEPackageCrossReference_1_0 = (CrossReference)cPackageAssignment_1.eContents().get(0);
		private final RuleCall cPackageEPackageQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cPackageEPackageCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExcludingKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExclusionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExclusionMetamodelElementParserRuleCall_2_2_0 = (RuleCall)cExclusionAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cExclusionAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cExclusionMetamodelElementParserRuleCall_2_3_1_0 = (RuleCall)cExclusionAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//AllPackageEntry:
		//	"package" package=[ecore::EPackage|QualifiedName] ("excluding" '{' exclusion+=MetamodelElement (','
		//	exclusion+=MetamodelElement)* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//"package" package=[ecore::EPackage|QualifiedName] ("excluding" '{' exclusion+=MetamodelElement (','
		//exclusion+=MetamodelElement)* '}')?
		public Group getGroup() { return cGroup; }
		
		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//package=[ecore::EPackage|QualifiedName]
		public Assignment getPackageAssignment_1() { return cPackageAssignment_1; }
		
		//[ecore::EPackage|QualifiedName]
		public CrossReference getPackageEPackageCrossReference_1_0() { return cPackageEPackageCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getPackageEPackageQualifiedNameParserRuleCall_1_0_1() { return cPackageEPackageQualifiedNameParserRuleCall_1_0_1; }
		
		//("excluding" '{' exclusion+=MetamodelElement (',' exclusion+=MetamodelElement)* '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//"excluding"
		public Keyword getExcludingKeyword_2_0() { return cExcludingKeyword_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }
		
		//exclusion+=MetamodelElement
		public Assignment getExclusionAssignment_2_2() { return cExclusionAssignment_2_2; }
		
		//MetamodelElement
		public RuleCall getExclusionMetamodelElementParserRuleCall_2_2_0() { return cExclusionMetamodelElementParserRuleCall_2_2_0; }
		
		//(',' exclusion+=MetamodelElement)*
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//','
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }
		
		//exclusion+=MetamodelElement
		public Assignment getExclusionAssignment_2_3_1() { return cExclusionAssignment_2_3_1; }
		
		//MetamodelElement
		public RuleCall getExclusionMetamodelElementParserRuleCall_2_3_1_0() { return cExclusionMetamodelElementParserRuleCall_2_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_4() { return cRightCurlyBracketKeyword_2_4; }
	}
	public class MetamodelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.MetamodelElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cPackageAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cPackageEPackageCrossReference_0_0_0 = (CrossReference)cPackageAssignment_0_0.eContents().get(0);
		private final RuleCall cPackageEPackageQualifiedNameParserRuleCall_0_0_0_1 = (RuleCall)cPackageEPackageCrossReference_0_0_0.eContents().get(1);
		private final Keyword cColonColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cClassifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cClassifierEClassifierCrossReference_1_0 = (CrossReference)cClassifierAssignment_1.eContents().get(0);
		private final RuleCall cClassifierEClassifierIDTerminalRuleCall_1_0_1 = (RuleCall)cClassifierEClassifierCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFeatureAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cFeatureENamedElementCrossReference_2_1_0 = (CrossReference)cFeatureAssignment_2_1.eContents().get(0);
		private final RuleCall cFeatureENamedElementIDTerminalRuleCall_2_1_0_1 = (RuleCall)cFeatureENamedElementCrossReference_2_1_0.eContents().get(1);
		
		//MetamodelElement:
		//	(package=[ecore::EPackage|QualifiedName] '::')? classifier=[ecore::EClassifier] ('.'
		//	feature=[ecore::ENamedElement])?;
		@Override public ParserRule getRule() { return rule; }
		
		//(package=[ecore::EPackage|QualifiedName] '::')? classifier=[ecore::EClassifier] ('.' feature=[ecore::ENamedElement])?
		public Group getGroup() { return cGroup; }
		
		//(package=[ecore::EPackage|QualifiedName] '::')?
		public Group getGroup_0() { return cGroup_0; }
		
		//package=[ecore::EPackage|QualifiedName]
		public Assignment getPackageAssignment_0_0() { return cPackageAssignment_0_0; }
		
		//[ecore::EPackage|QualifiedName]
		public CrossReference getPackageEPackageCrossReference_0_0_0() { return cPackageEPackageCrossReference_0_0_0; }
		
		//QualifiedName
		public RuleCall getPackageEPackageQualifiedNameParserRuleCall_0_0_0_1() { return cPackageEPackageQualifiedNameParserRuleCall_0_0_0_1; }
		
		//'::'
		public Keyword getColonColonKeyword_0_1() { return cColonColonKeyword_0_1; }
		
		//classifier=[ecore::EClassifier]
		public Assignment getClassifierAssignment_1() { return cClassifierAssignment_1; }
		
		//[ecore::EClassifier]
		public CrossReference getClassifierEClassifierCrossReference_1_0() { return cClassifierEClassifierCrossReference_1_0; }
		
		//ID
		public RuleCall getClassifierEClassifierIDTerminalRuleCall_1_0_1() { return cClassifierEClassifierIDTerminalRuleCall_1_0_1; }
		
		//('.' feature=[ecore::ENamedElement])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//feature=[ecore::ENamedElement]
		public Assignment getFeatureAssignment_2_1() { return cFeatureAssignment_2_1; }
		
		//[ecore::ENamedElement]
		public CrossReference getFeatureENamedElementCrossReference_2_1_0() { return cFeatureENamedElementCrossReference_2_1_0; }
		
		//ID
		public RuleCall getFeatureENamedElementIDTerminalRuleCall_2_1_0_1() { return cFeatureENamedElementIDTerminalRuleCall_2_1_0_1; }
	}
	public class MetamodelDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.MetamodelDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMetamodelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSpecificationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSpecificationMetamodelSpecificationParserRuleCall_2_0 = (RuleCall)cSpecificationAssignment_2.eContents().get(0);
		
		//MetamodelDeclaration:
		//	'metamodel' name=ID specification=MetamodelSpecification;
		@Override public ParserRule getRule() { return rule; }
		
		//'metamodel' name=ID specification=MetamodelSpecification
		public Group getGroup() { return cGroup; }
		
		//'metamodel'
		public Keyword getMetamodelKeyword_0() { return cMetamodelKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//specification=MetamodelSpecification
		public Assignment getSpecificationAssignment_2() { return cSpecificationAssignment_2; }
		
		//MetamodelSpecification
		public RuleCall getSpecificationMetamodelSpecificationParserRuleCall_2_0() { return cSpecificationMetamodelSpecificationParserRuleCall_2_0; }
	}
	public class MetamodelReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.MetamodelReference");
		private final Assignment cReferredAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cReferredMetamodelDeclarationCrossReference_0 = (CrossReference)cReferredAssignment.eContents().get(0);
		private final RuleCall cReferredMetamodelDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cReferredMetamodelDeclarationCrossReference_0.eContents().get(1);
		
		//MetamodelReference:
		//	referred=[MetamodelDeclaration];
		@Override public ParserRule getRule() { return rule; }
		
		//referred=[MetamodelDeclaration]
		public Assignment getReferredAssignment() { return cReferredAssignment; }
		
		//[MetamodelDeclaration]
		public CrossReference getReferredMetamodelDeclarationCrossReference_0() { return cReferredMetamodelDeclarationCrossReference_0; }
		
		//ID
		public RuleCall getReferredMetamodelDeclarationIDTerminalRuleCall_0_1() { return cReferredMetamodelDeclarationIDTerminalRuleCall_0_1; }
	}
	public class MetamodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.Metamodel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMetamodelReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMetamodelSpecificationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Metamodel:
		//	MetamodelReference | MetamodelSpecification;
		@Override public ParserRule getRule() { return rule; }
		
		//MetamodelReference | MetamodelSpecification
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MetamodelReference
		public RuleCall getMetamodelReferenceParserRuleCall_0() { return cMetamodelReferenceParserRuleCall_0; }
		
		//MetamodelSpecification
		public RuleCall getMetamodelSpecificationParserRuleCall_1() { return cMetamodelSpecificationParserRuleCall_1; }
	}
	public class PartialModelSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.PartialModelSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEntryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEntryPartialModelEntryParserRuleCall_1_0 = (RuleCall)cEntryAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEntryAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEntryPartialModelEntryParserRuleCall_2_1_0 = (RuleCall)cEntryAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		/////////////////////////////////////////////////////
		//// Partial Model
		/////////////////////////////////////////////////////
		//PartialModelSpecification:
		//	'{' entry+=PartialModelEntry (',' entry+=PartialModelEntry)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' entry+=PartialModelEntry (',' entry+=PartialModelEntry)? '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//entry+=PartialModelEntry
		public Assignment getEntryAssignment_1() { return cEntryAssignment_1; }
		
		//PartialModelEntry
		public RuleCall getEntryPartialModelEntryParserRuleCall_1_0() { return cEntryPartialModelEntryParserRuleCall_1_0; }
		
		//(',' entry+=PartialModelEntry)?
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//entry+=PartialModelEntry
		public Assignment getEntryAssignment_2_1() { return cEntryAssignment_2_1; }
		
		//PartialModelEntry
		public RuleCall getEntryPartialModelEntryParserRuleCall_2_1_0() { return cEntryPartialModelEntryParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class PartialModelEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.PartialModelEntry");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cModelEntryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFolderEntryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PartialModelEntry:
		//	ModelEntry | FolderEntry;
		@Override public ParserRule getRule() { return rule; }
		
		//ModelEntry | FolderEntry
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ModelEntry
		public RuleCall getModelEntryParserRuleCall_0() { return cModelEntryParserRuleCall_0; }
		
		//FolderEntry
		public RuleCall getFolderEntryParserRuleCall_1() { return cFolderEntryParserRuleCall_1; }
	}
	public class ModelEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.ModelEntry");
		private final Assignment cPathAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPathFileParserRuleCall_0 = (RuleCall)cPathAssignment.eContents().get(0);
		
		//ModelEntry:
		//	path=File;
		@Override public ParserRule getRule() { return rule; }
		
		//path=File
		public Assignment getPathAssignment() { return cPathAssignment; }
		
		//File
		public RuleCall getPathFileParserRuleCall_0() { return cPathFileParserRuleCall_0; }
	}
	public class FolderEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.FolderEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFolderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathFileParserRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExcludingKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExclusionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExclusionModelEntryParserRuleCall_2_2_0 = (RuleCall)cExclusionAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cExclusionAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cExclusionModelEntryParserRuleCall_2_3_1_0 = (RuleCall)cExclusionAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//FolderEntry:
		//	"folder" path=File ("excluding" "{" exclusion+=ModelEntry ("," exclusion+=ModelEntry)* "}")?;
		@Override public ParserRule getRule() { return rule; }
		
		//"folder" path=File ("excluding" "{" exclusion+=ModelEntry ("," exclusion+=ModelEntry)* "}")?
		public Group getGroup() { return cGroup; }
		
		//"folder"
		public Keyword getFolderKeyword_0() { return cFolderKeyword_0; }
		
		//path=File
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }
		
		//File
		public RuleCall getPathFileParserRuleCall_1_0() { return cPathFileParserRuleCall_1_0; }
		
		//("excluding" "{" exclusion+=ModelEntry ("," exclusion+=ModelEntry)* "}")?
		public Group getGroup_2() { return cGroup_2; }
		
		//"excluding"
		public Keyword getExcludingKeyword_2_0() { return cExcludingKeyword_2_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }
		
		//exclusion+=ModelEntry
		public Assignment getExclusionAssignment_2_2() { return cExclusionAssignment_2_2; }
		
		//ModelEntry
		public RuleCall getExclusionModelEntryParserRuleCall_2_2_0() { return cExclusionModelEntryParserRuleCall_2_2_0; }
		
		//("," exclusion+=ModelEntry)*
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }
		
		//exclusion+=ModelEntry
		public Assignment getExclusionAssignment_2_3_1() { return cExclusionAssignment_2_3_1; }
		
		//ModelEntry
		public RuleCall getExclusionModelEntryParserRuleCall_2_3_1_0() { return cExclusionModelEntryParserRuleCall_2_3_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2_4() { return cRightCurlyBracketKeyword_2_4; }
	}
	public class PartialModelDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.PartialModelDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSpecificationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSpecificationPartialModelSpecificationParserRuleCall_2_0 = (RuleCall)cSpecificationAssignment_2.eContents().get(0);
		
		//PartialModelDeclaration:
		//	'models' name=ID specification=PartialModelSpecification;
		@Override public ParserRule getRule() { return rule; }
		
		//'models' name=ID specification=PartialModelSpecification
		public Group getGroup() { return cGroup; }
		
		//'models'
		public Keyword getModelsKeyword_0() { return cModelsKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//specification=PartialModelSpecification
		public Assignment getSpecificationAssignment_2() { return cSpecificationAssignment_2; }
		
		//PartialModelSpecification
		public RuleCall getSpecificationPartialModelSpecificationParserRuleCall_2_0() { return cSpecificationPartialModelSpecificationParserRuleCall_2_0; }
	}
	public class PartialModelReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.PartialModelReference");
		private final Assignment cReferredAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cReferredPartialModelDeclarationCrossReference_0 = (CrossReference)cReferredAssignment.eContents().get(0);
		private final RuleCall cReferredPartialModelDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cReferredPartialModelDeclarationCrossReference_0.eContents().get(1);
		
		//PartialModelReference:
		//	referred=[PartialModelDeclaration];
		@Override public ParserRule getRule() { return rule; }
		
		//referred=[PartialModelDeclaration]
		public Assignment getReferredAssignment() { return cReferredAssignment; }
		
		//[PartialModelDeclaration]
		public CrossReference getReferredPartialModelDeclarationCrossReference_0() { return cReferredPartialModelDeclarationCrossReference_0; }
		
		//ID
		public RuleCall getReferredPartialModelDeclarationIDTerminalRuleCall_0_1() { return cReferredPartialModelDeclarationIDTerminalRuleCall_0_1; }
	}
	public class PartialModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.PartialModel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPartialModelSpecificationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPartialModelReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PartialModel:
		//	PartialModelSpecification | PartialModelReference;
		@Override public ParserRule getRule() { return rule; }
		
		//PartialModelSpecification | PartialModelReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PartialModelSpecification
		public RuleCall getPartialModelSpecificationParserRuleCall_0() { return cPartialModelSpecificationParserRuleCall_0; }
		
		//PartialModelReference
		public RuleCall getPartialModelReferenceParserRuleCall_1() { return cPartialModelReferenceParserRuleCall_1; }
	}
	public class PatternSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.PatternSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEntriesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEntriesPatternEntryParserRuleCall_1_0 = (RuleCall)cEntriesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEntriesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEntriesPatternEntryParserRuleCall_2_1_0 = (RuleCall)cEntriesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		/////////////////////////////////////////////////////
		//// Patterns
		/////////////////////////////////////////////////////
		//PatternSpecification:
		//	'{' entries+=PatternEntry (',' entries+=PatternEntry)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' entries+=PatternEntry (',' entries+=PatternEntry)* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//entries+=PatternEntry
		public Assignment getEntriesAssignment_1() { return cEntriesAssignment_1; }
		
		//PatternEntry
		public RuleCall getEntriesPatternEntryParserRuleCall_1_0() { return cEntriesPatternEntryParserRuleCall_1_0; }
		
		//(',' entries+=PatternEntry)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//entries+=PatternEntry
		public Assignment getEntriesAssignment_2_1() { return cEntriesAssignment_2_1; }
		
		//PatternEntry
		public RuleCall getEntriesPatternEntryParserRuleCall_2_1_0() { return cEntriesPatternEntryParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class PatternEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.PatternEntry");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPatternElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAllPatternEntryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PatternEntry:
		//	PatternElement | AllPatternEntry;
		@Override public ParserRule getRule() { return rule; }
		
		//PatternElement | AllPatternEntry
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PatternElement
		public RuleCall getPatternElementParserRuleCall_0() { return cPatternElementParserRuleCall_0; }
		
		//AllPatternEntry
		public RuleCall getAllPatternEntryParserRuleCall_1() { return cAllPatternEntryParserRuleCall_1; }
	}
	public class AllPatternEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.AllPatternEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPackagePatternModelCrossReference_1_0 = (CrossReference)cPackageAssignment_1.eContents().get(0);
		private final RuleCall cPackagePatternModelQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cPackagePatternModelCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExcludingKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExclusuionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExclusuionPatternElementParserRuleCall_2_2_0 = (RuleCall)cExclusuionAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cExclusuionAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cExclusuionPatternElementParserRuleCall_2_3_1_0 = (RuleCall)cExclusuionAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//AllPatternEntry:
		//	'package' package=[viatra::PatternModel|QualifiedName] ('excluding' '{' exclusuion+=PatternElement (','
		//	exclusuion+=PatternElement)* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'package' package=[viatra::PatternModel|QualifiedName] ('excluding' '{' exclusuion+=PatternElement (','
		//exclusuion+=PatternElement)* '}')?
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//package=[viatra::PatternModel|QualifiedName]
		public Assignment getPackageAssignment_1() { return cPackageAssignment_1; }
		
		//[viatra::PatternModel|QualifiedName]
		public CrossReference getPackagePatternModelCrossReference_1_0() { return cPackagePatternModelCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getPackagePatternModelQualifiedNameParserRuleCall_1_0_1() { return cPackagePatternModelQualifiedNameParserRuleCall_1_0_1; }
		
		//('excluding' '{' exclusuion+=PatternElement (',' exclusuion+=PatternElement)* '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'excluding'
		public Keyword getExcludingKeyword_2_0() { return cExcludingKeyword_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }
		
		//exclusuion+=PatternElement
		public Assignment getExclusuionAssignment_2_2() { return cExclusuionAssignment_2_2; }
		
		//PatternElement
		public RuleCall getExclusuionPatternElementParserRuleCall_2_2_0() { return cExclusuionPatternElementParserRuleCall_2_2_0; }
		
		//(',' exclusuion+=PatternElement)*
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//','
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }
		
		//exclusuion+=PatternElement
		public Assignment getExclusuionAssignment_2_3_1() { return cExclusuionAssignment_2_3_1; }
		
		//PatternElement
		public RuleCall getExclusuionPatternElementParserRuleCall_2_3_1_0() { return cExclusuionPatternElementParserRuleCall_2_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_4() { return cRightCurlyBracketKeyword_2_4; }
	}
	public class PatternElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.PatternElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cPackageAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cPackagePatternModelCrossReference_0_0_0 = (CrossReference)cPackageAssignment_0_0.eContents().get(0);
		private final RuleCall cPackagePatternModelQualifiedNameParserRuleCall_0_0_0_1 = (RuleCall)cPackagePatternModelCrossReference_0_0_0.eContents().get(1);
		private final Keyword cColonColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cPatternAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPatternPatternCrossReference_1_0 = (CrossReference)cPatternAssignment_1.eContents().get(0);
		private final RuleCall cPatternPatternIDTerminalRuleCall_1_0_1 = (RuleCall)cPatternPatternCrossReference_1_0.eContents().get(1);
		
		//PatternElement:
		//	(package=[viatra::PatternModel|QualifiedName] '::')? pattern=[viatra::Pattern];
		@Override public ParserRule getRule() { return rule; }
		
		//(package=[viatra::PatternModel|QualifiedName] '::')? pattern=[viatra::Pattern]
		public Group getGroup() { return cGroup; }
		
		//(package=[viatra::PatternModel|QualifiedName] '::')?
		public Group getGroup_0() { return cGroup_0; }
		
		//package=[viatra::PatternModel|QualifiedName]
		public Assignment getPackageAssignment_0_0() { return cPackageAssignment_0_0; }
		
		//[viatra::PatternModel|QualifiedName]
		public CrossReference getPackagePatternModelCrossReference_0_0_0() { return cPackagePatternModelCrossReference_0_0_0; }
		
		//QualifiedName
		public RuleCall getPackagePatternModelQualifiedNameParserRuleCall_0_0_0_1() { return cPackagePatternModelQualifiedNameParserRuleCall_0_0_0_1; }
		
		//'::'
		public Keyword getColonColonKeyword_0_1() { return cColonColonKeyword_0_1; }
		
		//pattern=[viatra::Pattern]
		public Assignment getPatternAssignment_1() { return cPatternAssignment_1; }
		
		//[viatra::Pattern]
		public CrossReference getPatternPatternCrossReference_1_0() { return cPatternPatternCrossReference_1_0; }
		
		//ID
		public RuleCall getPatternPatternIDTerminalRuleCall_1_0_1() { return cPatternPatternIDTerminalRuleCall_1_0_1; }
	}
	public class GraphPatternDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.GraphPatternDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSpecificationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSpecificationPatternSpecificationParserRuleCall_2_0 = (RuleCall)cSpecificationAssignment_2.eContents().get(0);
		
		//GraphPatternDeclaration:
		//	'constraints' name=ID specification=PatternSpecification;
		@Override public ParserRule getRule() { return rule; }
		
		//'constraints' name=ID specification=PatternSpecification
		public Group getGroup() { return cGroup; }
		
		//'constraints'
		public Keyword getConstraintsKeyword_0() { return cConstraintsKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//specification=PatternSpecification
		public Assignment getSpecificationAssignment_2() { return cSpecificationAssignment_2; }
		
		//PatternSpecification
		public RuleCall getSpecificationPatternSpecificationParserRuleCall_2_0() { return cSpecificationPatternSpecificationParserRuleCall_2_0; }
	}
	public class GraphPatternReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.GraphPatternReference");
		private final Assignment cReferredAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cReferredGraphPatternDeclarationCrossReference_0 = (CrossReference)cReferredAssignment.eContents().get(0);
		private final RuleCall cReferredGraphPatternDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cReferredGraphPatternDeclarationCrossReference_0.eContents().get(1);
		
		//GraphPatternReference:
		//	referred=[GraphPatternDeclaration];
		@Override public ParserRule getRule() { return rule; }
		
		//referred=[GraphPatternDeclaration]
		public Assignment getReferredAssignment() { return cReferredAssignment; }
		
		//[GraphPatternDeclaration]
		public CrossReference getReferredGraphPatternDeclarationCrossReference_0() { return cReferredGraphPatternDeclarationCrossReference_0; }
		
		//ID
		public RuleCall getReferredGraphPatternDeclarationIDTerminalRuleCall_0_1() { return cReferredGraphPatternDeclarationIDTerminalRuleCall_0_1; }
	}
	public class GraphPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.GraphPattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGraphPatternReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPatternSpecificationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//GraphPattern:
		//	GraphPatternReference | PatternSpecification;
		@Override public ParserRule getRule() { return rule; }
		
		//GraphPatternReference | PatternSpecification
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GraphPatternReference
		public RuleCall getGraphPatternReferenceParserRuleCall_0() { return cGraphPatternReferenceParserRuleCall_0; }
		
		//PatternSpecification
		public RuleCall getPatternSpecificationParserRuleCall_1() { return cPatternSpecificationParserRuleCall_1; }
	}
	public class ConfigSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.ConfigSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConfigSpecificationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cEntriesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cEntriesConfigEntryParserRuleCall_2_0_0 = (RuleCall)cEntriesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cEntriesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cEntriesConfigEntryParserRuleCall_2_1_1_0 = (RuleCall)cEntriesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		/////////////////////////////////////////////////////
		//// SolverConfig
		/////////////////////////////////////////////////////
		//ConfigSpecification:
		//	{ConfigSpecification} '{' (entries+=ConfigEntry ("," entries+=ConfigEntry)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ConfigSpecification} '{' (entries+=ConfigEntry ("," entries+=ConfigEntry)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{ConfigSpecification}
		public Action getConfigSpecificationAction_0() { return cConfigSpecificationAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(entries+=ConfigEntry ("," entries+=ConfigEntry)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//entries+=ConfigEntry
		public Assignment getEntriesAssignment_2_0() { return cEntriesAssignment_2_0; }
		
		//ConfigEntry
		public RuleCall getEntriesConfigEntryParserRuleCall_2_0_0() { return cEntriesConfigEntryParserRuleCall_2_0_0; }
		
		//("," entries+=ConfigEntry)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//entries+=ConfigEntry
		public Assignment getEntriesAssignment_2_1_1() { return cEntriesAssignment_2_1_1; }
		
		//ConfigEntry
		public RuleCall getEntriesConfigEntryParserRuleCall_2_1_1_0() { return cEntriesConfigEntryParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ConfigDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.ConfigDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConfigKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSpecificationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSpecificationConfigSpecificationParserRuleCall_2_0 = (RuleCall)cSpecificationAssignment_2.eContents().get(0);
		
		//ConfigDeclaration:
		//	'config' name=ID specification=ConfigSpecification;
		@Override public ParserRule getRule() { return rule; }
		
		//'config' name=ID specification=ConfigSpecification
		public Group getGroup() { return cGroup; }
		
		//'config'
		public Keyword getConfigKeyword_0() { return cConfigKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//specification=ConfigSpecification
		public Assignment getSpecificationAssignment_2() { return cSpecificationAssignment_2; }
		
		//ConfigSpecification
		public RuleCall getSpecificationConfigSpecificationParserRuleCall_2_0() { return cSpecificationConfigSpecificationParserRuleCall_2_0; }
	}
	public class ConfigEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.ConfigEntry");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDocumentationEntryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRuntimeEntryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMemoryEntryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCustomEntryParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ConfigEntry:
		//	DocumentationEntry | RuntimeEntry | MemoryEntry | CustomEntry;
		@Override public ParserRule getRule() { return rule; }
		
		//DocumentationEntry | RuntimeEntry | MemoryEntry | CustomEntry
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DocumentationEntry
		public RuleCall getDocumentationEntryParserRuleCall_0() { return cDocumentationEntryParserRuleCall_0; }
		
		//RuntimeEntry
		public RuleCall getRuntimeEntryParserRuleCall_1() { return cRuntimeEntryParserRuleCall_1; }
		
		//MemoryEntry
		public RuleCall getMemoryEntryParserRuleCall_2() { return cMemoryEntryParserRuleCall_2; }
		
		//CustomEntry
		public RuleCall getCustomEntryParserRuleCall_3() { return cCustomEntryParserRuleCall_3; }
	}
	public class DocumentationEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.DocumentationEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLogLevelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLevelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLevelDocumentLevelSpecificationEnumRuleCall_2_0 = (RuleCall)cLevelAssignment_2.eContents().get(0);
		
		//DocumentationEntry:
		//	"log-level" '=' level=DocumentLevelSpecification;
		@Override public ParserRule getRule() { return rule; }
		
		//"log-level" '=' level=DocumentLevelSpecification
		public Group getGroup() { return cGroup; }
		
		//"log-level"
		public Keyword getLogLevelKeyword_0() { return cLogLevelKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//level=DocumentLevelSpecification
		public Assignment getLevelAssignment_2() { return cLevelAssignment_2; }
		
		//DocumentLevelSpecification
		public RuleCall getLevelDocumentLevelSpecificationEnumRuleCall_2_0() { return cLevelDocumentLevelSpecificationEnumRuleCall_2_0; }
	}
	public class RuntimeEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.RuntimeEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuntimeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMillisecLimitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMillisecLimitINTTerminalRuleCall_2_0 = (RuleCall)cMillisecLimitAssignment_2.eContents().get(0);
		
		//RuntimeEntry:
		//	"runtime" "=" millisecLimit=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//"runtime" "=" millisecLimit=INT
		public Group getGroup() { return cGroup; }
		
		//"runtime"
		public Keyword getRuntimeKeyword_0() { return cRuntimeKeyword_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//millisecLimit=INT
		public Assignment getMillisecLimitAssignment_2() { return cMillisecLimitAssignment_2; }
		
		//INT
		public RuleCall getMillisecLimitINTTerminalRuleCall_2_0() { return cMillisecLimitINTTerminalRuleCall_2_0; }
	}
	public class MemoryEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.MemoryEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMemoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMegabyteLimitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMegabyteLimitINTTerminalRuleCall_2_0 = (RuleCall)cMegabyteLimitAssignment_2.eContents().get(0);
		
		//MemoryEntry:
		//	"memory" "=" megabyteLimit=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//"memory" "=" megabyteLimit=INT
		public Group getGroup() { return cGroup; }
		
		//"memory"
		public Keyword getMemoryKeyword_0() { return cMemoryKeyword_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//megabyteLimit=INT
		public Assignment getMegabyteLimitAssignment_2() { return cMegabyteLimitAssignment_2; }
		
		//INT
		public RuleCall getMegabyteLimitINTTerminalRuleCall_2_0() { return cMegabyteLimitINTTerminalRuleCall_2_0; }
	}
	public class CustomEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.CustomEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeySTRINGTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//CustomEntry:
		//	key=STRING "=" value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//key=STRING "=" value=STRING
		public Group getGroup() { return cGroup; }
		
		//key=STRING
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_0_0() { return cKeySTRINGTerminalRuleCall_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class ConfigReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.ConfigReference");
		private final Assignment cConfigAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cConfigConfigDeclarationCrossReference_0 = (CrossReference)cConfigAssignment.eContents().get(0);
		private final RuleCall cConfigConfigDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cConfigConfigDeclarationCrossReference_0.eContents().get(1);
		
		//ConfigReference:
		//	config=[ConfigDeclaration];
		@Override public ParserRule getRule() { return rule; }
		
		//config=[ConfigDeclaration]
		public Assignment getConfigAssignment() { return cConfigAssignment; }
		
		//[ConfigDeclaration]
		public CrossReference getConfigConfigDeclarationCrossReference_0() { return cConfigConfigDeclarationCrossReference_0; }
		
		//ID
		public RuleCall getConfigConfigDeclarationIDTerminalRuleCall_0_1() { return cConfigConfigDeclarationIDTerminalRuleCall_0_1; }
	}
	public class ConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.Config");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConfigSpecificationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConfigReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Config:
		//	ConfigSpecification | ConfigReference;
		@Override public ParserRule getRule() { return rule; }
		
		//ConfigSpecification | ConfigReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConfigSpecification
		public RuleCall getConfigSpecificationParserRuleCall_0() { return cConfigSpecificationParserRuleCall_0; }
		
		//ConfigReference
		public RuleCall getConfigReferenceParserRuleCall_1() { return cConfigReferenceParserRuleCall_1; }
	}
	public class ScopeSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.ScopeSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cScopeSpecificationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cScopesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cScopesTypeScopeParserRuleCall_2_0_0 = (RuleCall)cScopesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cScopesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cScopesTypeScopeParserRuleCall_2_1_1_0 = (RuleCall)cScopesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ScopeSpecification:
		//	{ScopeSpecification} '{' (scopes+=TypeScope (',' scopes+=TypeScope)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ScopeSpecification} '{' (scopes+=TypeScope (',' scopes+=TypeScope)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{ScopeSpecification}
		public Action getScopeSpecificationAction_0() { return cScopeSpecificationAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(scopes+=TypeScope (',' scopes+=TypeScope)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//scopes+=TypeScope
		public Assignment getScopesAssignment_2_0() { return cScopesAssignment_2_0; }
		
		//TypeScope
		public RuleCall getScopesTypeScopeParserRuleCall_2_0_0() { return cScopesTypeScopeParserRuleCall_2_0_0; }
		
		//(',' scopes+=TypeScope)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//scopes+=TypeScope
		public Assignment getScopesAssignment_2_1_1() { return cScopesAssignment_2_1_1; }
		
		//TypeScope
		public RuleCall getScopesTypeScopeParserRuleCall_2_1_1_0() { return cScopesTypeScopeParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class TypeScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.TypeScope");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassTypeScopeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObjectTypeScopeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerTypeScopeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRealTypeScopeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStringTypeScopeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//TypeScope:
		//	ClassTypeScope | ObjectTypeScope | IntegerTypeScope | RealTypeScope | StringTypeScope;
		@Override public ParserRule getRule() { return rule; }
		
		//ClassTypeScope | ObjectTypeScope | IntegerTypeScope | RealTypeScope | StringTypeScope
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ClassTypeScope
		public RuleCall getClassTypeScopeParserRuleCall_0() { return cClassTypeScopeParserRuleCall_0; }
		
		//ObjectTypeScope
		public RuleCall getObjectTypeScopeParserRuleCall_1() { return cObjectTypeScopeParserRuleCall_1; }
		
		//IntegerTypeScope
		public RuleCall getIntegerTypeScopeParserRuleCall_2() { return cIntegerTypeScopeParserRuleCall_2; }
		
		//RealTypeScope
		public RuleCall getRealTypeScopeParserRuleCall_3() { return cRealTypeScopeParserRuleCall_3; }
		
		//StringTypeScope
		public RuleCall getStringTypeScopeParserRuleCall_4() { return cStringTypeScopeParserRuleCall_4; }
	}
	public class ClassTypeScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.ClassTypeScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeClassReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cSetsNewAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cSetsNewPlusSignEqualsSignKeyword_2_0_0 = (Keyword)cSetsNewAssignment_2_0.eContents().get(0);
		private final Assignment cSetsSumAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cSetsSumEqualsSignKeyword_2_1_0 = (Keyword)cSetsSumAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cNumberAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cNumberExactNumberParserRuleCall_3_0_0 = (RuleCall)cNumberAssignment_3_0.eContents().get(0);
		private final Assignment cNumberAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cNumberIntervallNumberParserRuleCall_3_1_0 = (RuleCall)cNumberAssignment_3_1.eContents().get(0);
		
		//ClassTypeScope:
		//	'#' type=ClassReference (setsNew?='+=' | setsSum?='=') (number=ExactNumber | number=IntervallNumber);
		@Override public ParserRule getRule() { return rule; }
		
		//'#' type=ClassReference (setsNew?='+=' | setsSum?='=') (number=ExactNumber | number=IntervallNumber)
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//type=ClassReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//ClassReference
		public RuleCall getTypeClassReferenceParserRuleCall_1_0() { return cTypeClassReferenceParserRuleCall_1_0; }
		
		//(setsNew?='+=' | setsSum?='=')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//setsNew?='+='
		public Assignment getSetsNewAssignment_2_0() { return cSetsNewAssignment_2_0; }
		
		//'+='
		public Keyword getSetsNewPlusSignEqualsSignKeyword_2_0_0() { return cSetsNewPlusSignEqualsSignKeyword_2_0_0; }
		
		//setsSum?='='
		public Assignment getSetsSumAssignment_2_1() { return cSetsSumAssignment_2_1; }
		
		//'='
		public Keyword getSetsSumEqualsSignKeyword_2_1_0() { return cSetsSumEqualsSignKeyword_2_1_0; }
		
		//(number=ExactNumber | number=IntervallNumber)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//number=ExactNumber
		public Assignment getNumberAssignment_3_0() { return cNumberAssignment_3_0; }
		
		//ExactNumber
		public RuleCall getNumberExactNumberParserRuleCall_3_0_0() { return cNumberExactNumberParserRuleCall_3_0_0; }
		
		//number=IntervallNumber
		public Assignment getNumberAssignment_3_1() { return cNumberAssignment_3_1; }
		
		//IntervallNumber
		public RuleCall getNumberIntervallNumberParserRuleCall_3_1_0() { return cNumberIntervallNumberParserRuleCall_3_1_0; }
	}
	public class ObjectTypeScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.ObjectTypeScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeObjectReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cSetsNewAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cSetsNewPlusSignEqualsSignKeyword_2_0_0 = (Keyword)cSetsNewAssignment_2_0.eContents().get(0);
		private final Assignment cSetsSumAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cSetsSumEqualsSignKeyword_2_1_0 = (Keyword)cSetsSumAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cNumberAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cNumberExactNumberParserRuleCall_3_0_0 = (RuleCall)cNumberAssignment_3_0.eContents().get(0);
		private final Assignment cNumberAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cNumberIntervallNumberParserRuleCall_3_1_0 = (RuleCall)cNumberAssignment_3_1.eContents().get(0);
		
		//ObjectTypeScope:
		//	'#' type=ObjectReference (setsNew?='+=' | setsSum?='=') (number=ExactNumber | number=IntervallNumber);
		@Override public ParserRule getRule() { return rule; }
		
		//'#' type=ObjectReference (setsNew?='+=' | setsSum?='=') (number=ExactNumber | number=IntervallNumber)
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//type=ObjectReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//ObjectReference
		public RuleCall getTypeObjectReferenceParserRuleCall_1_0() { return cTypeObjectReferenceParserRuleCall_1_0; }
		
		//(setsNew?='+=' | setsSum?='=')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//setsNew?='+='
		public Assignment getSetsNewAssignment_2_0() { return cSetsNewAssignment_2_0; }
		
		//'+='
		public Keyword getSetsNewPlusSignEqualsSignKeyword_2_0_0() { return cSetsNewPlusSignEqualsSignKeyword_2_0_0; }
		
		//setsSum?='='
		public Assignment getSetsSumAssignment_2_1() { return cSetsSumAssignment_2_1; }
		
		//'='
		public Keyword getSetsSumEqualsSignKeyword_2_1_0() { return cSetsSumEqualsSignKeyword_2_1_0; }
		
		//(number=ExactNumber | number=IntervallNumber)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//number=ExactNumber
		public Assignment getNumberAssignment_3_0() { return cNumberAssignment_3_0; }
		
		//ExactNumber
		public RuleCall getNumberExactNumberParserRuleCall_3_0_0() { return cNumberExactNumberParserRuleCall_3_0_0; }
		
		//number=IntervallNumber
		public Assignment getNumberAssignment_3_1() { return cNumberAssignment_3_1; }
		
		//IntervallNumber
		public RuleCall getNumberIntervallNumberParserRuleCall_3_1_0() { return cNumberIntervallNumberParserRuleCall_3_1_0; }
	}
	public class IntegerTypeScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.IntegerTypeScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIntegerReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cSetsNewAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cSetsNewPlusSignEqualsSignKeyword_2_0_0 = (Keyword)cSetsNewAssignment_2_0.eContents().get(0);
		private final Assignment cSetsSumAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cSetsSumEqualsSignKeyword_2_1_0 = (Keyword)cSetsSumAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cNumberAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cNumberExactNumberParserRuleCall_3_0_0 = (RuleCall)cNumberAssignment_3_0.eContents().get(0);
		private final Assignment cNumberAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cNumberIntervallNumberParserRuleCall_3_1_0 = (RuleCall)cNumberAssignment_3_1.eContents().get(0);
		private final Assignment cNumberAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cNumberIntEnumberationParserRuleCall_3_2_0 = (RuleCall)cNumberAssignment_3_2.eContents().get(0);
		
		//IntegerTypeScope:
		//	'#' type=IntegerReference (setsNew?='+=' | setsSum?='=') (number=ExactNumber | number=IntervallNumber |
		//	number=IntEnumberation);
		@Override public ParserRule getRule() { return rule; }
		
		//'#' type=IntegerReference (setsNew?='+=' | setsSum?='=') (number=ExactNumber | number=IntervallNumber |
		//number=IntEnumberation)
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//type=IntegerReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//IntegerReference
		public RuleCall getTypeIntegerReferenceParserRuleCall_1_0() { return cTypeIntegerReferenceParserRuleCall_1_0; }
		
		//(setsNew?='+=' | setsSum?='=')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//setsNew?='+='
		public Assignment getSetsNewAssignment_2_0() { return cSetsNewAssignment_2_0; }
		
		//'+='
		public Keyword getSetsNewPlusSignEqualsSignKeyword_2_0_0() { return cSetsNewPlusSignEqualsSignKeyword_2_0_0; }
		
		//setsSum?='='
		public Assignment getSetsSumAssignment_2_1() { return cSetsSumAssignment_2_1; }
		
		//'='
		public Keyword getSetsSumEqualsSignKeyword_2_1_0() { return cSetsSumEqualsSignKeyword_2_1_0; }
		
		//(number=ExactNumber | number=IntervallNumber | number=IntEnumberation)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//number=ExactNumber
		public Assignment getNumberAssignment_3_0() { return cNumberAssignment_3_0; }
		
		//ExactNumber
		public RuleCall getNumberExactNumberParserRuleCall_3_0_0() { return cNumberExactNumberParserRuleCall_3_0_0; }
		
		//number=IntervallNumber
		public Assignment getNumberAssignment_3_1() { return cNumberAssignment_3_1; }
		
		//IntervallNumber
		public RuleCall getNumberIntervallNumberParserRuleCall_3_1_0() { return cNumberIntervallNumberParserRuleCall_3_1_0; }
		
		//number=IntEnumberation
		public Assignment getNumberAssignment_3_2() { return cNumberAssignment_3_2; }
		
		//IntEnumberation
		public RuleCall getNumberIntEnumberationParserRuleCall_3_2_0() { return cNumberIntEnumberationParserRuleCall_3_2_0; }
	}
	public class RealTypeScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.RealTypeScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeRealReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cSetsNewAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cSetsNewPlusSignEqualsSignKeyword_2_0_0 = (Keyword)cSetsNewAssignment_2_0.eContents().get(0);
		private final Assignment cSetsSumAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cSetsSumEqualsSignKeyword_2_1_0 = (Keyword)cSetsSumAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cNumberAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cNumberExactNumberParserRuleCall_3_0_0 = (RuleCall)cNumberAssignment_3_0.eContents().get(0);
		private final Assignment cNumberAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cNumberIntervallNumberParserRuleCall_3_1_0 = (RuleCall)cNumberAssignment_3_1.eContents().get(0);
		private final Assignment cNumberAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cNumberRealEnumerationParserRuleCall_3_2_0 = (RuleCall)cNumberAssignment_3_2.eContents().get(0);
		
		//RealTypeScope:
		//	'#' type=RealReference (setsNew?='+=' | setsSum?='=') (number=ExactNumber | number=IntervallNumber |
		//	number=RealEnumeration);
		@Override public ParserRule getRule() { return rule; }
		
		//'#' type=RealReference (setsNew?='+=' | setsSum?='=') (number=ExactNumber | number=IntervallNumber |
		//number=RealEnumeration)
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//type=RealReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//RealReference
		public RuleCall getTypeRealReferenceParserRuleCall_1_0() { return cTypeRealReferenceParserRuleCall_1_0; }
		
		//(setsNew?='+=' | setsSum?='=')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//setsNew?='+='
		public Assignment getSetsNewAssignment_2_0() { return cSetsNewAssignment_2_0; }
		
		//'+='
		public Keyword getSetsNewPlusSignEqualsSignKeyword_2_0_0() { return cSetsNewPlusSignEqualsSignKeyword_2_0_0; }
		
		//setsSum?='='
		public Assignment getSetsSumAssignment_2_1() { return cSetsSumAssignment_2_1; }
		
		//'='
		public Keyword getSetsSumEqualsSignKeyword_2_1_0() { return cSetsSumEqualsSignKeyword_2_1_0; }
		
		//(number=ExactNumber | number=IntervallNumber | number=RealEnumeration)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//number=ExactNumber
		public Assignment getNumberAssignment_3_0() { return cNumberAssignment_3_0; }
		
		//ExactNumber
		public RuleCall getNumberExactNumberParserRuleCall_3_0_0() { return cNumberExactNumberParserRuleCall_3_0_0; }
		
		//number=IntervallNumber
		public Assignment getNumberAssignment_3_1() { return cNumberAssignment_3_1; }
		
		//IntervallNumber
		public RuleCall getNumberIntervallNumberParserRuleCall_3_1_0() { return cNumberIntervallNumberParserRuleCall_3_1_0; }
		
		//number=RealEnumeration
		public Assignment getNumberAssignment_3_2() { return cNumberAssignment_3_2; }
		
		//RealEnumeration
		public RuleCall getNumberRealEnumerationParserRuleCall_3_2_0() { return cNumberRealEnumerationParserRuleCall_3_2_0; }
	}
	public class StringTypeScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.StringTypeScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeStringReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cSetsNewAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cSetsNewPlusSignEqualsSignKeyword_2_0_0 = (Keyword)cSetsNewAssignment_2_0.eContents().get(0);
		private final Assignment cSetsSumAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cSetsSumEqualsSignKeyword_2_1_0 = (Keyword)cSetsSumAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cNumberAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cNumberExactNumberParserRuleCall_3_0_0 = (RuleCall)cNumberAssignment_3_0.eContents().get(0);
		private final Assignment cNumberAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cNumberIntervallNumberParserRuleCall_3_1_0 = (RuleCall)cNumberAssignment_3_1.eContents().get(0);
		private final Assignment cNumberAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cNumberStringEnumerationParserRuleCall_3_2_0 = (RuleCall)cNumberAssignment_3_2.eContents().get(0);
		
		//StringTypeScope:
		//	'#' type=StringReference (setsNew?='+=' | setsSum?='=') (number=ExactNumber | number=IntervallNumber |
		//	number=StringEnumeration);
		@Override public ParserRule getRule() { return rule; }
		
		//'#' type=StringReference (setsNew?='+=' | setsSum?='=') (number=ExactNumber | number=IntervallNumber |
		//number=StringEnumeration)
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//type=StringReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//StringReference
		public RuleCall getTypeStringReferenceParserRuleCall_1_0() { return cTypeStringReferenceParserRuleCall_1_0; }
		
		//(setsNew?='+=' | setsSum?='=')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//setsNew?='+='
		public Assignment getSetsNewAssignment_2_0() { return cSetsNewAssignment_2_0; }
		
		//'+='
		public Keyword getSetsNewPlusSignEqualsSignKeyword_2_0_0() { return cSetsNewPlusSignEqualsSignKeyword_2_0_0; }
		
		//setsSum?='='
		public Assignment getSetsSumAssignment_2_1() { return cSetsSumAssignment_2_1; }
		
		//'='
		public Keyword getSetsSumEqualsSignKeyword_2_1_0() { return cSetsSumEqualsSignKeyword_2_1_0; }
		
		//(number=ExactNumber | number=IntervallNumber | number=StringEnumeration)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//number=ExactNumber
		public Assignment getNumberAssignment_3_0() { return cNumberAssignment_3_0; }
		
		//ExactNumber
		public RuleCall getNumberExactNumberParserRuleCall_3_0_0() { return cNumberExactNumberParserRuleCall_3_0_0; }
		
		//number=IntervallNumber
		public Assignment getNumberAssignment_3_1() { return cNumberAssignment_3_1; }
		
		//IntervallNumber
		public RuleCall getNumberIntervallNumberParserRuleCall_3_1_0() { return cNumberIntervallNumberParserRuleCall_3_1_0; }
		
		//number=StringEnumeration
		public Assignment getNumberAssignment_3_2() { return cNumberAssignment_3_2; }
		
		//StringEnumeration
		public RuleCall getNumberStringEnumerationParserRuleCall_3_2_0() { return cNumberStringEnumerationParserRuleCall_3_2_0; }
	}
	public class TypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.TypeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObjectReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRealReferenceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStringReferenceParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//TypeReference:
		//	ClassReference | ObjectReference | IntegerReference | RealReference | StringReference;
		@Override public ParserRule getRule() { return rule; }
		
		//ClassReference | ObjectReference | IntegerReference | RealReference | StringReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ClassReference
		public RuleCall getClassReferenceParserRuleCall_0() { return cClassReferenceParserRuleCall_0; }
		
		//ObjectReference
		public RuleCall getObjectReferenceParserRuleCall_1() { return cObjectReferenceParserRuleCall_1; }
		
		//IntegerReference
		public RuleCall getIntegerReferenceParserRuleCall_2() { return cIntegerReferenceParserRuleCall_2; }
		
		//RealReference
		public RuleCall getRealReferenceParserRuleCall_3() { return cRealReferenceParserRuleCall_3; }
		
		//StringReference
		public RuleCall getStringReferenceParserRuleCall_4() { return cStringReferenceParserRuleCall_4; }
	}
	public class ClassReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.ClassReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementMetamodelElementParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ClassReference:
		//	'<' element=MetamodelElement '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<' element=MetamodelElement '>'
		public Group getGroup() { return cGroup; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//element=MetamodelElement
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//MetamodelElement
		public RuleCall getElementMetamodelElementParserRuleCall_1_0() { return cElementMetamodelElementParserRuleCall_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
	}
	public class ObjectReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.ObjectReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObjectReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNodeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ObjectReference:
		//	{ObjectReference} 'node';
		@Override public ParserRule getRule() { return rule; }
		
		//{ObjectReference} 'node'
		public Group getGroup() { return cGroup; }
		
		//{ObjectReference}
		public Action getObjectReferenceAction_0() { return cObjectReferenceAction_0; }
		
		//'node'
		public Keyword getNodeKeyword_1() { return cNodeKeyword_1; }
	}
	public class IntegerReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.IntegerReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerScopeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IntegerReference:
		//	{IntegerScope} 'int';
		@Override public ParserRule getRule() { return rule; }
		
		//{IntegerScope} 'int'
		public Group getGroup() { return cGroup; }
		
		//{IntegerScope}
		public Action getIntegerScopeAction_0() { return cIntegerScopeAction_0; }
		
		//'int'
		public Keyword getIntKeyword_1() { return cIntKeyword_1; }
	}
	public class RealReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.RealReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRealScopeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRealKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//RealReference:
		//	{RealScope} 'real';
		@Override public ParserRule getRule() { return rule; }
		
		//{RealScope} 'real'
		public Group getGroup() { return cGroup; }
		
		//{RealScope}
		public Action getRealScopeAction_0() { return cRealScopeAction_0; }
		
		//'real'
		public Keyword getRealKeyword_1() { return cRealKeyword_1; }
	}
	public class StringReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.StringReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringScopeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StringReference:
		//	{StringScope} 'string';
		@Override public ParserRule getRule() { return rule; }
		
		//{StringScope} 'string'
		public Group getGroup() { return cGroup; }
		
		//{StringScope}
		public Action getStringScopeAction_0() { return cStringScopeAction_0; }
		
		//'string'
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
	}
	public class NumberSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.NumberSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExactNumberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntervallNumberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntEnumberationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRealEnumerationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStringEnumerationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//NumberSpecification:
		//	ExactNumber | IntervallNumber | IntEnumberation | RealEnumeration | StringEnumeration;
		@Override public ParserRule getRule() { return rule; }
		
		//ExactNumber | IntervallNumber | IntEnumberation | RealEnumeration | StringEnumeration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExactNumber
		public RuleCall getExactNumberParserRuleCall_0() { return cExactNumberParserRuleCall_0; }
		
		//IntervallNumber
		public RuleCall getIntervallNumberParserRuleCall_1() { return cIntervallNumberParserRuleCall_1; }
		
		//IntEnumberation
		public RuleCall getIntEnumberationParserRuleCall_2() { return cIntEnumberationParserRuleCall_2; }
		
		//RealEnumeration
		public RuleCall getRealEnumerationParserRuleCall_3() { return cRealEnumerationParserRuleCall_3; }
		
		//StringEnumeration
		public RuleCall getStringEnumerationParserRuleCall_4() { return cStringEnumerationParserRuleCall_4; }
	}
	public class ExactNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.ExactNumber");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExactNumberAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExactNumberINTTerminalRuleCall_0_0 = (RuleCall)cExactNumberAssignment_0.eContents().get(0);
		private final Assignment cExactUnlimitedAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cExactUnlimitedAsteriskKeyword_1_0 = (Keyword)cExactUnlimitedAssignment_1.eContents().get(0);
		
		//ExactNumber:
		//	exactNumber=INT | exactUnlimited?='*';
		@Override public ParserRule getRule() { return rule; }
		
		//exactNumber=INT | exactUnlimited?='*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//exactNumber=INT
		public Assignment getExactNumberAssignment_0() { return cExactNumberAssignment_0; }
		
		//INT
		public RuleCall getExactNumberINTTerminalRuleCall_0_0() { return cExactNumberINTTerminalRuleCall_0_0; }
		
		//exactUnlimited?='*'
		public Assignment getExactUnlimitedAssignment_1() { return cExactUnlimitedAssignment_1; }
		
		//'*'
		public Keyword getExactUnlimitedAsteriskKeyword_1_0() { return cExactUnlimitedAsteriskKeyword_1_0; }
	}
	public class IntervallNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.IntervallNumber");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMinAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMinINTTerminalRuleCall_0_0 = (RuleCall)cMinAssignment_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cMaxNumberAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cMaxNumberINTTerminalRuleCall_2_0_0 = (RuleCall)cMaxNumberAssignment_2_0.eContents().get(0);
		private final Assignment cMaxUnlimitedAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cMaxUnlimitedAsteriskKeyword_2_1_0 = (Keyword)cMaxUnlimitedAssignment_2_1.eContents().get(0);
		
		//IntervallNumber:
		//	min=INT '..' (maxNumber=INT | maxUnlimited?='*');
		@Override public ParserRule getRule() { return rule; }
		
		//min=INT '..' (maxNumber=INT | maxUnlimited?='*')
		public Group getGroup() { return cGroup; }
		
		//min=INT
		public Assignment getMinAssignment_0() { return cMinAssignment_0; }
		
		//INT
		public RuleCall getMinINTTerminalRuleCall_0_0() { return cMinINTTerminalRuleCall_0_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }
		
		//(maxNumber=INT | maxUnlimited?='*')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//maxNumber=INT
		public Assignment getMaxNumberAssignment_2_0() { return cMaxNumberAssignment_2_0; }
		
		//INT
		public RuleCall getMaxNumberINTTerminalRuleCall_2_0_0() { return cMaxNumberINTTerminalRuleCall_2_0_0; }
		
		//maxUnlimited?='*'
		public Assignment getMaxUnlimitedAssignment_2_1() { return cMaxUnlimitedAssignment_2_1; }
		
		//'*'
		public Keyword getMaxUnlimitedAsteriskKeyword_2_1_0() { return cMaxUnlimitedAsteriskKeyword_2_1_0; }
	}
	public class IntEnumberationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.IntEnumberation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntEnumberationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cEntryAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cEntryINTLiteralParserRuleCall_2_0_0 = (RuleCall)cEntryAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cEntryAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cEntryINTLiteralParserRuleCall_2_1_1_0 = (RuleCall)cEntryAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//IntEnumberation:
		//	{IntEnumberation} '{' (entry+=INTLiteral (',' entry+=INTLiteral)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{IntEnumberation} '{' (entry+=INTLiteral (',' entry+=INTLiteral)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{IntEnumberation}
		public Action getIntEnumberationAction_0() { return cIntEnumberationAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(entry+=INTLiteral (',' entry+=INTLiteral)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//entry+=INTLiteral
		public Assignment getEntryAssignment_2_0() { return cEntryAssignment_2_0; }
		
		//INTLiteral
		public RuleCall getEntryINTLiteralParserRuleCall_2_0_0() { return cEntryINTLiteralParserRuleCall_2_0_0; }
		
		//(',' entry+=INTLiteral)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//entry+=INTLiteral
		public Assignment getEntryAssignment_2_1_1() { return cEntryAssignment_2_1_1; }
		
		//INTLiteral
		public RuleCall getEntryINTLiteralParserRuleCall_2_1_1_0() { return cEntryINTLiteralParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class RealEnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.RealEnumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRealEnumerationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cEntryAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cEntryREALLiteralParserRuleCall_2_0_0 = (RuleCall)cEntryAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cEntryAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cEntryREALLiteralParserRuleCall_2_1_1_0 = (RuleCall)cEntryAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RealEnumeration:
		//	{RealEnumeration} '{' (entry+=REALLiteral (',' entry+=REALLiteral)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{RealEnumeration} '{' (entry+=REALLiteral (',' entry+=REALLiteral)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{RealEnumeration}
		public Action getRealEnumerationAction_0() { return cRealEnumerationAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(entry+=REALLiteral (',' entry+=REALLiteral)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//entry+=REALLiteral
		public Assignment getEntryAssignment_2_0() { return cEntryAssignment_2_0; }
		
		//REALLiteral
		public RuleCall getEntryREALLiteralParserRuleCall_2_0_0() { return cEntryREALLiteralParserRuleCall_2_0_0; }
		
		//(',' entry+=REALLiteral)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//entry+=REALLiteral
		public Assignment getEntryAssignment_2_1_1() { return cEntryAssignment_2_1_1; }
		
		//REALLiteral
		public RuleCall getEntryREALLiteralParserRuleCall_2_1_1_0() { return cEntryREALLiteralParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class StringEnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.StringEnumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringEnumerationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cEntryAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cEntrySTRINGTerminalRuleCall_2_0_0 = (RuleCall)cEntryAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cEntryAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cEntrySTRINGTerminalRuleCall_2_1_1_0 = (RuleCall)cEntryAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StringEnumeration:
		//	{StringEnumeration} '{' (entry+=STRING (',' entry+=STRING)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{StringEnumeration} '{' (entry+=STRING (',' entry+=STRING)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{StringEnumeration}
		public Action getStringEnumerationAction_0() { return cStringEnumerationAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(entry+=STRING (',' entry+=STRING)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//entry+=STRING
		public Assignment getEntryAssignment_2_0() { return cEntryAssignment_2_0; }
		
		//STRING
		public RuleCall getEntrySTRINGTerminalRuleCall_2_0_0() { return cEntrySTRINGTerminalRuleCall_2_0_0; }
		
		//(',' entry+=STRING)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//entry+=STRING
		public Assignment getEntryAssignment_2_1_1() { return cEntryAssignment_2_1_1; }
		
		//STRING
		public RuleCall getEntrySTRINGTerminalRuleCall_2_1_1_0() { return cEntrySTRINGTerminalRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ScopeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.ScopeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScopeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSpecificationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSpecificationScopeSpecificationParserRuleCall_2_0 = (RuleCall)cSpecificationAssignment_2.eContents().get(0);
		
		//ScopeDeclaration:
		//	'scope' name=ID specification=ScopeSpecification;
		@Override public ParserRule getRule() { return rule; }
		
		//'scope' name=ID specification=ScopeSpecification
		public Group getGroup() { return cGroup; }
		
		//'scope'
		public Keyword getScopeKeyword_0() { return cScopeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//specification=ScopeSpecification
		public Assignment getSpecificationAssignment_2() { return cSpecificationAssignment_2; }
		
		//ScopeSpecification
		public RuleCall getSpecificationScopeSpecificationParserRuleCall_2_0() { return cSpecificationScopeSpecificationParserRuleCall_2_0; }
	}
	public class ScopeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.ScopeReference");
		private final Assignment cReferredAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cReferredScopeDeclarationCrossReference_0 = (CrossReference)cReferredAssignment.eContents().get(0);
		private final RuleCall cReferredScopeDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cReferredScopeDeclarationCrossReference_0.eContents().get(1);
		
		//ScopeReference:
		//	referred=[ScopeDeclaration];
		@Override public ParserRule getRule() { return rule; }
		
		//referred=[ScopeDeclaration]
		public Assignment getReferredAssignment() { return cReferredAssignment; }
		
		//[ScopeDeclaration]
		public CrossReference getReferredScopeDeclarationCrossReference_0() { return cReferredScopeDeclarationCrossReference_0; }
		
		//ID
		public RuleCall getReferredScopeDeclarationIDTerminalRuleCall_0_1() { return cReferredScopeDeclarationIDTerminalRuleCall_0_1; }
	}
	public class ScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.Scope");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cScopeSpecificationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cScopeReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Scope:
		//	ScopeSpecification | ScopeReference;
		@Override public ParserRule getRule() { return rule; }
		
		//ScopeSpecification | ScopeReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ScopeSpecification
		public RuleCall getScopeSpecificationParserRuleCall_0() { return cScopeSpecificationParserRuleCall_0; }
		
		//ScopeReference
		public RuleCall getScopeReferenceParserRuleCall_1() { return cScopeReferenceParserRuleCall_1; }
	}
	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.Task");
		private final RuleCall cGenerationTaskParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Task:
		//	GenerationTask /*| CoverageCalculation | ValidationTask*/;
		@Override public ParserRule getRule() { return rule; }
		
		//GenerationTask
		public RuleCall getGenerationTaskParserRuleCall() { return cGenerationTaskParserRuleCall; }
	}
	public class GenerationTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.GenerationTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGenerateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cGenerationTaskAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cMetamodelKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cMetamodelAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cMetamodelMetamodelParserRuleCall_3_0_2_0 = (RuleCall)cMetamodelAssignment_3_0_2.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cPartialModelKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cPartialModelAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cPartialModelPartialModelParserRuleCall_3_1_2_0 = (RuleCall)cPartialModelAssignment_3_1_2.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cConstraintsKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_2_1 = (Keyword)cGroup_3_2.eContents().get(1);
		private final Assignment cPatternsAssignment_3_2_2 = (Assignment)cGroup_3_2.eContents().get(2);
		private final RuleCall cPatternsGraphPatternParserRuleCall_3_2_2_0 = (RuleCall)cPatternsAssignment_3_2_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Keyword cScopeKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_3_1 = (Keyword)cGroup_3_3.eContents().get(1);
		private final Assignment cScopeAssignment_3_3_2 = (Assignment)cGroup_3_3.eContents().get(2);
		private final RuleCall cScopeScopeParserRuleCall_3_3_2_0 = (RuleCall)cScopeAssignment_3_3_2.eContents().get(0);
		private final Group cGroup_3_4 = (Group)cUnorderedGroup_3.eContents().get(4);
		private final Assignment cNumberSpecifiedAssignment_3_4_0 = (Assignment)cGroup_3_4.eContents().get(0);
		private final Keyword cNumberSpecifiedNumberKeyword_3_4_0_0 = (Keyword)cNumberSpecifiedAssignment_3_4_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_4_1 = (Keyword)cGroup_3_4.eContents().get(1);
		private final Assignment cNumberAssignment_3_4_2 = (Assignment)cGroup_3_4.eContents().get(2);
		private final RuleCall cNumberINTTerminalRuleCall_3_4_2_0 = (RuleCall)cNumberAssignment_3_4_2.eContents().get(0);
		private final Group cGroup_3_5 = (Group)cUnorderedGroup_3.eContents().get(5);
		private final Assignment cRunSpecifiedAssignment_3_5_0 = (Assignment)cGroup_3_5.eContents().get(0);
		private final Keyword cRunSpecifiedRunsKeyword_3_5_0_0 = (Keyword)cRunSpecifiedAssignment_3_5_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_5_1 = (Keyword)cGroup_3_5.eContents().get(1);
		private final Assignment cRunsAssignment_3_5_2 = (Assignment)cGroup_3_5.eContents().get(2);
		private final RuleCall cRunsINTTerminalRuleCall_3_5_2_0 = (RuleCall)cRunsAssignment_3_5_2.eContents().get(0);
		private final Group cGroup_3_6 = (Group)cUnorderedGroup_3.eContents().get(6);
		private final Keyword cSolverKeyword_3_6_0 = (Keyword)cGroup_3_6.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_6_1 = (Keyword)cGroup_3_6.eContents().get(1);
		private final Assignment cSolverAssignment_3_6_2 = (Assignment)cGroup_3_6.eContents().get(2);
		private final RuleCall cSolverSolverEnumRuleCall_3_6_2_0 = (RuleCall)cSolverAssignment_3_6_2.eContents().get(0);
		private final Group cGroup_3_7 = (Group)cUnorderedGroup_3.eContents().get(7);
		private final Keyword cConfigKeyword_3_7_0 = (Keyword)cGroup_3_7.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_7_1 = (Keyword)cGroup_3_7.eContents().get(1);
		private final Assignment cConfigAssignment_3_7_2 = (Assignment)cGroup_3_7.eContents().get(2);
		private final RuleCall cConfigConfigParserRuleCall_3_7_2_0 = (RuleCall)cConfigAssignment_3_7_2.eContents().get(0);
		private final Group cGroup_3_8 = (Group)cUnorderedGroup_3.eContents().get(8);
		private final Keyword cDebugKeyword_3_8_0 = (Keyword)cGroup_3_8.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_8_1 = (Keyword)cGroup_3_8.eContents().get(1);
		private final Assignment cDebugFolderAssignment_3_8_2 = (Assignment)cGroup_3_8.eContents().get(2);
		private final RuleCall cDebugFolderFileParserRuleCall_3_8_2_0 = (RuleCall)cDebugFolderAssignment_3_8_2.eContents().get(0);
		private final Group cGroup_3_9 = (Group)cUnorderedGroup_3.eContents().get(9);
		private final Keyword cLogKeyword_3_9_0 = (Keyword)cGroup_3_9.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_9_1 = (Keyword)cGroup_3_9.eContents().get(1);
		private final Assignment cTargetLogFileAssignment_3_9_2 = (Assignment)cGroup_3_9.eContents().get(2);
		private final RuleCall cTargetLogFileFileParserRuleCall_3_9_2_0 = (RuleCall)cTargetLogFileAssignment_3_9_2.eContents().get(0);
		private final Group cGroup_3_10 = (Group)cUnorderedGroup_3.eContents().get(10);
		private final Keyword cStatisticsKeyword_3_10_0 = (Keyword)cGroup_3_10.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_10_1 = (Keyword)cGroup_3_10.eContents().get(1);
		private final Assignment cTargetStatisticsFileAssignment_3_10_2 = (Assignment)cGroup_3_10.eContents().get(2);
		private final RuleCall cTargetStatisticsFileFileParserRuleCall_3_10_2_0 = (RuleCall)cTargetStatisticsFileAssignment_3_10_2.eContents().get(0);
		private final Group cGroup_3_11 = (Group)cUnorderedGroup_3.eContents().get(11);
		private final Keyword cOutputKeyword_3_11_0 = (Keyword)cGroup_3_11.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_11_1 = (Keyword)cGroup_3_11.eContents().get(1);
		private final Assignment cTagetFolderAssignment_3_11_2 = (Assignment)cGroup_3_11.eContents().get(2);
		private final RuleCall cTagetFolderFileParserRuleCall_3_11_2_0 = (RuleCall)cTagetFolderAssignment_3_11_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GenerationTask:
		//	'generate' {GenerationTask} '{' (('metamodel' '=' metamodel=Metamodel)? & ('partial-model' '='
		//	partialModel=PartialModel)? & ('constraints' '=' patterns=GraphPattern)? & ('scope' '=' scope=Scope)? &
		//	(numberSpecified?='number' '=' number=INT)? & (runSpecified?='runs' '=' runs=INT)? & ('solver' '=' solver=Solver)? &
		//	('config' '=' config=Config)? & ('debug' '=' debugFolder=File)? & ('log' '=' targetLogFile=File)? & ('statistics' '='
		//	targetStatisticsFile=File)? & ('output' '=' tagetFolder=File)?) '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'generate' {GenerationTask} '{' (('metamodel' '=' metamodel=Metamodel)? & ('partial-model' '='
		//partialModel=PartialModel)? & ('constraints' '=' patterns=GraphPattern)? & ('scope' '=' scope=Scope)? &
		//(numberSpecified?='number' '=' number=INT)? & (runSpecified?='runs' '=' runs=INT)? & ('solver' '=' solver=Solver)? &
		//('config' '=' config=Config)? & ('debug' '=' debugFolder=File)? & ('log' '=' targetLogFile=File)? & ('statistics' '='
		//targetStatisticsFile=File)? & ('output' '=' tagetFolder=File)?) '}'
		public Group getGroup() { return cGroup; }
		
		//'generate'
		public Keyword getGenerateKeyword_0() { return cGenerateKeyword_0; }
		
		//{GenerationTask}
		public Action getGenerationTaskAction_1() { return cGenerationTaskAction_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(('metamodel' '=' metamodel=Metamodel)? & ('partial-model' '=' partialModel=PartialModel)? & ('constraints' '='
		//patterns=GraphPattern)? & ('scope' '=' scope=Scope)? & (numberSpecified?='number' '=' number=INT)? &
		//(runSpecified?='runs' '=' runs=INT)? & ('solver' '=' solver=Solver)? & ('config' '=' config=Config)? & ('debug' '='
		//debugFolder=File)? & ('log' '=' targetLogFile=File)? & ('statistics' '=' targetStatisticsFile=File)? & ('output' '='
		//tagetFolder=File)?)
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//('metamodel' '=' metamodel=Metamodel)?
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'metamodel'
		public Keyword getMetamodelKeyword_3_0_0() { return cMetamodelKeyword_3_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0_1() { return cEqualsSignKeyword_3_0_1; }
		
		//metamodel=Metamodel
		public Assignment getMetamodelAssignment_3_0_2() { return cMetamodelAssignment_3_0_2; }
		
		//Metamodel
		public RuleCall getMetamodelMetamodelParserRuleCall_3_0_2_0() { return cMetamodelMetamodelParserRuleCall_3_0_2_0; }
		
		//('partial-model' '=' partialModel=PartialModel)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'partial-model'
		public Keyword getPartialModelKeyword_3_1_0() { return cPartialModelKeyword_3_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1_1() { return cEqualsSignKeyword_3_1_1; }
		
		//partialModel=PartialModel
		public Assignment getPartialModelAssignment_3_1_2() { return cPartialModelAssignment_3_1_2; }
		
		//PartialModel
		public RuleCall getPartialModelPartialModelParserRuleCall_3_1_2_0() { return cPartialModelPartialModelParserRuleCall_3_1_2_0; }
		
		//('constraints' '=' patterns=GraphPattern)?
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'constraints'
		public Keyword getConstraintsKeyword_3_2_0() { return cConstraintsKeyword_3_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_2_1() { return cEqualsSignKeyword_3_2_1; }
		
		//patterns=GraphPattern
		public Assignment getPatternsAssignment_3_2_2() { return cPatternsAssignment_3_2_2; }
		
		//GraphPattern
		public RuleCall getPatternsGraphPatternParserRuleCall_3_2_2_0() { return cPatternsGraphPatternParserRuleCall_3_2_2_0; }
		
		//('scope' '=' scope=Scope)?
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//'scope'
		public Keyword getScopeKeyword_3_3_0() { return cScopeKeyword_3_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_3_1() { return cEqualsSignKeyword_3_3_1; }
		
		//scope=Scope
		public Assignment getScopeAssignment_3_3_2() { return cScopeAssignment_3_3_2; }
		
		//Scope
		public RuleCall getScopeScopeParserRuleCall_3_3_2_0() { return cScopeScopeParserRuleCall_3_3_2_0; }
		
		//(numberSpecified?='number' '=' number=INT)?
		public Group getGroup_3_4() { return cGroup_3_4; }
		
		//numberSpecified?='number'
		public Assignment getNumberSpecifiedAssignment_3_4_0() { return cNumberSpecifiedAssignment_3_4_0; }
		
		//'number'
		public Keyword getNumberSpecifiedNumberKeyword_3_4_0_0() { return cNumberSpecifiedNumberKeyword_3_4_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_4_1() { return cEqualsSignKeyword_3_4_1; }
		
		//number=INT
		public Assignment getNumberAssignment_3_4_2() { return cNumberAssignment_3_4_2; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_3_4_2_0() { return cNumberINTTerminalRuleCall_3_4_2_0; }
		
		//(runSpecified?='runs' '=' runs=INT)?
		public Group getGroup_3_5() { return cGroup_3_5; }
		
		//runSpecified?='runs'
		public Assignment getRunSpecifiedAssignment_3_5_0() { return cRunSpecifiedAssignment_3_5_0; }
		
		//'runs'
		public Keyword getRunSpecifiedRunsKeyword_3_5_0_0() { return cRunSpecifiedRunsKeyword_3_5_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_5_1() { return cEqualsSignKeyword_3_5_1; }
		
		//runs=INT
		public Assignment getRunsAssignment_3_5_2() { return cRunsAssignment_3_5_2; }
		
		//INT
		public RuleCall getRunsINTTerminalRuleCall_3_5_2_0() { return cRunsINTTerminalRuleCall_3_5_2_0; }
		
		//('solver' '=' solver=Solver)?
		public Group getGroup_3_6() { return cGroup_3_6; }
		
		//'solver'
		public Keyword getSolverKeyword_3_6_0() { return cSolverKeyword_3_6_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_6_1() { return cEqualsSignKeyword_3_6_1; }
		
		//solver=Solver
		public Assignment getSolverAssignment_3_6_2() { return cSolverAssignment_3_6_2; }
		
		//Solver
		public RuleCall getSolverSolverEnumRuleCall_3_6_2_0() { return cSolverSolverEnumRuleCall_3_6_2_0; }
		
		//('config' '=' config=Config)?
		public Group getGroup_3_7() { return cGroup_3_7; }
		
		//'config'
		public Keyword getConfigKeyword_3_7_0() { return cConfigKeyword_3_7_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_7_1() { return cEqualsSignKeyword_3_7_1; }
		
		//config=Config
		public Assignment getConfigAssignment_3_7_2() { return cConfigAssignment_3_7_2; }
		
		//Config
		public RuleCall getConfigConfigParserRuleCall_3_7_2_0() { return cConfigConfigParserRuleCall_3_7_2_0; }
		
		//('debug' '=' debugFolder=File)?
		public Group getGroup_3_8() { return cGroup_3_8; }
		
		//'debug'
		public Keyword getDebugKeyword_3_8_0() { return cDebugKeyword_3_8_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_8_1() { return cEqualsSignKeyword_3_8_1; }
		
		//debugFolder=File
		public Assignment getDebugFolderAssignment_3_8_2() { return cDebugFolderAssignment_3_8_2; }
		
		//File
		public RuleCall getDebugFolderFileParserRuleCall_3_8_2_0() { return cDebugFolderFileParserRuleCall_3_8_2_0; }
		
		//('log' '=' targetLogFile=File)?
		public Group getGroup_3_9() { return cGroup_3_9; }
		
		//'log'
		public Keyword getLogKeyword_3_9_0() { return cLogKeyword_3_9_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_9_1() { return cEqualsSignKeyword_3_9_1; }
		
		//targetLogFile=File
		public Assignment getTargetLogFileAssignment_3_9_2() { return cTargetLogFileAssignment_3_9_2; }
		
		//File
		public RuleCall getTargetLogFileFileParserRuleCall_3_9_2_0() { return cTargetLogFileFileParserRuleCall_3_9_2_0; }
		
		//('statistics' '=' targetStatisticsFile=File)?
		public Group getGroup_3_10() { return cGroup_3_10; }
		
		//'statistics'
		public Keyword getStatisticsKeyword_3_10_0() { return cStatisticsKeyword_3_10_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_10_1() { return cEqualsSignKeyword_3_10_1; }
		
		//targetStatisticsFile=File
		public Assignment getTargetStatisticsFileAssignment_3_10_2() { return cTargetStatisticsFileAssignment_3_10_2; }
		
		//File
		public RuleCall getTargetStatisticsFileFileParserRuleCall_3_10_2_0() { return cTargetStatisticsFileFileParserRuleCall_3_10_2_0; }
		
		//('output' '=' tagetFolder=File)?
		public Group getGroup_3_11() { return cGroup_3_11; }
		
		//'output'
		public Keyword getOutputKeyword_3_11_0() { return cOutputKeyword_3_11_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_11_1() { return cEqualsSignKeyword_3_11_1; }
		
		//tagetFolder=File
		public Assignment getTagetFolderAssignment_3_11_2() { return cTagetFolderAssignment_3_11_2; }
		
		//File
		public RuleCall getTagetFolderFileParserRuleCall_3_11_2_0() { return cTagetFolderFileParserRuleCall_3_11_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	
	public class DocumentLevelSpecificationElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.DocumentLevelSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNoneNoneKeyword_0_0 = (Keyword)cNoneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNormalEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNormalNormalKeyword_1_0 = (Keyword)cNormalEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFullEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFullFullKeyword_2_0 = (Keyword)cFullEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum DocumentLevelSpecification:
		//	none | normal | full;
		public EnumRule getRule() { return rule; }
		
		//none | normal | full
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//none
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_0() { return cNoneEnumLiteralDeclaration_0; }
		
		//"none"
		public Keyword getNoneNoneKeyword_0_0() { return cNoneNoneKeyword_0_0; }
		
		//normal
		public EnumLiteralDeclaration getNormalEnumLiteralDeclaration_1() { return cNormalEnumLiteralDeclaration_1; }
		
		//"normal"
		public Keyword getNormalNormalKeyword_1_0() { return cNormalNormalKeyword_1_0; }
		
		//full
		public EnumLiteralDeclaration getFullEnumLiteralDeclaration_2() { return cFullEnumLiteralDeclaration_2; }
		
		//"full"
		public Keyword getFullFullKeyword_2_0() { return cFullFullKeyword_2_0; }
	}
	public class SolverElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration.Solver");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSMTSolverEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSMTSolverSMTSolverKeyword_0_0 = (Keyword)cSMTSolverEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAlloySolverEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAlloySolverAlloySolverKeyword_1_0 = (Keyword)cAlloySolverEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cViatraSolverEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cViatraSolverViatraSolverKeyword_2_0 = (Keyword)cViatraSolverEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTPTPSolverEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTPTPSolverTPTPSolverKeyword_3_0 = (Keyword)cTPTPSolverEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Solver:
		//	SMTSolver | AlloySolver | ViatraSolver | TPTPSolver;
		public EnumRule getRule() { return rule; }
		
		//SMTSolver | AlloySolver | ViatraSolver | TPTPSolver
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SMTSolver
		public EnumLiteralDeclaration getSMTSolverEnumLiteralDeclaration_0() { return cSMTSolverEnumLiteralDeclaration_0; }
		
		//"SMTSolver"
		public Keyword getSMTSolverSMTSolverKeyword_0_0() { return cSMTSolverSMTSolverKeyword_0_0; }
		
		//AlloySolver
		public EnumLiteralDeclaration getAlloySolverEnumLiteralDeclaration_1() { return cAlloySolverEnumLiteralDeclaration_1; }
		
		//"AlloySolver"
		public Keyword getAlloySolverAlloySolverKeyword_1_0() { return cAlloySolverAlloySolverKeyword_1_0; }
		
		//ViatraSolver
		public EnumLiteralDeclaration getViatraSolverEnumLiteralDeclaration_2() { return cViatraSolverEnumLiteralDeclaration_2; }
		
		//"ViatraSolver"
		public Keyword getViatraSolverViatraSolverKeyword_2_0() { return cViatraSolverViatraSolverKeyword_2_0; }
		
		//TPTPSolver
		public EnumLiteralDeclaration getTPTPSolverEnumLiteralDeclaration_3() { return cTPTPSolverEnumLiteralDeclaration_3; }
		
		//"TPTPSolver"
		public Keyword getTPTPSolverTPTPSolverKeyword_3_0() { return cTPTPSolverTPTPSolverKeyword_3_0; }
	}
	
	private final ConfigurationScriptElements pConfigurationScript;
	private final CommandElements pCommand;
	private final QualifiedNameElements pQualifiedName;
	private final REALLiteralElements pREALLiteral;
	private final INTLiteralElements pINTLiteral;
	private final ImportElements pImport;
	private final EPackageImportElements pEPackageImport;
	private final ViatraImportElements pViatraImport;
	private final DeclarationElements pDeclaration;
	private final FileSpecificationElements pFileSpecification;
	private final FileDeclarationElements pFileDeclaration;
	private final FileReferenceElements pFileReference;
	private final FileElements pFile;
	private final MetamodelSpecificationElements pMetamodelSpecification;
	private final MetamodelEntryElements pMetamodelEntry;
	private final AllPackageEntryElements pAllPackageEntry;
	private final MetamodelElementElements pMetamodelElement;
	private final MetamodelDeclarationElements pMetamodelDeclaration;
	private final MetamodelReferenceElements pMetamodelReference;
	private final MetamodelElements pMetamodel;
	private final PartialModelSpecificationElements pPartialModelSpecification;
	private final PartialModelEntryElements pPartialModelEntry;
	private final ModelEntryElements pModelEntry;
	private final FolderEntryElements pFolderEntry;
	private final PartialModelDeclarationElements pPartialModelDeclaration;
	private final PartialModelReferenceElements pPartialModelReference;
	private final PartialModelElements pPartialModel;
	private final PatternSpecificationElements pPatternSpecification;
	private final PatternEntryElements pPatternEntry;
	private final AllPatternEntryElements pAllPatternEntry;
	private final PatternElementElements pPatternElement;
	private final GraphPatternDeclarationElements pGraphPatternDeclaration;
	private final GraphPatternReferenceElements pGraphPatternReference;
	private final GraphPatternElements pGraphPattern;
	private final ConfigSpecificationElements pConfigSpecification;
	private final ConfigDeclarationElements pConfigDeclaration;
	private final ConfigEntryElements pConfigEntry;
	private final DocumentationEntryElements pDocumentationEntry;
	private final DocumentLevelSpecificationElements eDocumentLevelSpecification;
	private final RuntimeEntryElements pRuntimeEntry;
	private final MemoryEntryElements pMemoryEntry;
	private final CustomEntryElements pCustomEntry;
	private final ConfigReferenceElements pConfigReference;
	private final ConfigElements pConfig;
	private final SolverElements eSolver;
	private final ScopeSpecificationElements pScopeSpecification;
	private final TypeScopeElements pTypeScope;
	private final ClassTypeScopeElements pClassTypeScope;
	private final ObjectTypeScopeElements pObjectTypeScope;
	private final IntegerTypeScopeElements pIntegerTypeScope;
	private final RealTypeScopeElements pRealTypeScope;
	private final StringTypeScopeElements pStringTypeScope;
	private final TypeReferenceElements pTypeReference;
	private final ClassReferenceElements pClassReference;
	private final ObjectReferenceElements pObjectReference;
	private final IntegerReferenceElements pIntegerReference;
	private final RealReferenceElements pRealReference;
	private final StringReferenceElements pStringReference;
	private final NumberSpecificationElements pNumberSpecification;
	private final ExactNumberElements pExactNumber;
	private final IntervallNumberElements pIntervallNumber;
	private final IntEnumberationElements pIntEnumberation;
	private final RealEnumerationElements pRealEnumeration;
	private final StringEnumerationElements pStringEnumeration;
	private final ScopeDeclarationElements pScopeDeclaration;
	private final ScopeReferenceElements pScopeReference;
	private final ScopeElements pScope;
	private final TaskElements pTask;
	private final GenerationTaskElements pGenerationTask;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ApplicationConfigurationGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pConfigurationScript = new ConfigurationScriptElements();
		this.pCommand = new CommandElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pREALLiteral = new REALLiteralElements();
		this.pINTLiteral = new INTLiteralElements();
		this.pImport = new ImportElements();
		this.pEPackageImport = new EPackageImportElements();
		this.pViatraImport = new ViatraImportElements();
		this.pDeclaration = new DeclarationElements();
		this.pFileSpecification = new FileSpecificationElements();
		this.pFileDeclaration = new FileDeclarationElements();
		this.pFileReference = new FileReferenceElements();
		this.pFile = new FileElements();
		this.pMetamodelSpecification = new MetamodelSpecificationElements();
		this.pMetamodelEntry = new MetamodelEntryElements();
		this.pAllPackageEntry = new AllPackageEntryElements();
		this.pMetamodelElement = new MetamodelElementElements();
		this.pMetamodelDeclaration = new MetamodelDeclarationElements();
		this.pMetamodelReference = new MetamodelReferenceElements();
		this.pMetamodel = new MetamodelElements();
		this.pPartialModelSpecification = new PartialModelSpecificationElements();
		this.pPartialModelEntry = new PartialModelEntryElements();
		this.pModelEntry = new ModelEntryElements();
		this.pFolderEntry = new FolderEntryElements();
		this.pPartialModelDeclaration = new PartialModelDeclarationElements();
		this.pPartialModelReference = new PartialModelReferenceElements();
		this.pPartialModel = new PartialModelElements();
		this.pPatternSpecification = new PatternSpecificationElements();
		this.pPatternEntry = new PatternEntryElements();
		this.pAllPatternEntry = new AllPatternEntryElements();
		this.pPatternElement = new PatternElementElements();
		this.pGraphPatternDeclaration = new GraphPatternDeclarationElements();
		this.pGraphPatternReference = new GraphPatternReferenceElements();
		this.pGraphPattern = new GraphPatternElements();
		this.pConfigSpecification = new ConfigSpecificationElements();
		this.pConfigDeclaration = new ConfigDeclarationElements();
		this.pConfigEntry = new ConfigEntryElements();
		this.pDocumentationEntry = new DocumentationEntryElements();
		this.eDocumentLevelSpecification = new DocumentLevelSpecificationElements();
		this.pRuntimeEntry = new RuntimeEntryElements();
		this.pMemoryEntry = new MemoryEntryElements();
		this.pCustomEntry = new CustomEntryElements();
		this.pConfigReference = new ConfigReferenceElements();
		this.pConfig = new ConfigElements();
		this.eSolver = new SolverElements();
		this.pScopeSpecification = new ScopeSpecificationElements();
		this.pTypeScope = new TypeScopeElements();
		this.pClassTypeScope = new ClassTypeScopeElements();
		this.pObjectTypeScope = new ObjectTypeScopeElements();
		this.pIntegerTypeScope = new IntegerTypeScopeElements();
		this.pRealTypeScope = new RealTypeScopeElements();
		this.pStringTypeScope = new StringTypeScopeElements();
		this.pTypeReference = new TypeReferenceElements();
		this.pClassReference = new ClassReferenceElements();
		this.pObjectReference = new ObjectReferenceElements();
		this.pIntegerReference = new IntegerReferenceElements();
		this.pRealReference = new RealReferenceElements();
		this.pStringReference = new StringReferenceElements();
		this.pNumberSpecification = new NumberSpecificationElements();
		this.pExactNumber = new ExactNumberElements();
		this.pIntervallNumber = new IntervallNumberElements();
		this.pIntEnumberation = new IntEnumberationElements();
		this.pRealEnumeration = new RealEnumerationElements();
		this.pStringEnumeration = new StringEnumerationElements();
		this.pScopeDeclaration = new ScopeDeclarationElements();
		this.pScopeReference = new ScopeReferenceElements();
		this.pScope = new ScopeElements();
		this.pTask = new TaskElements();
		this.pGenerationTask = new GenerationTaskElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.bme.mit.inf.dslreasoner.application.ApplicationConfiguration".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ConfigurationScript:
	//	imports+=Import*
	//	commands+=Command*;
	public ConfigurationScriptElements getConfigurationScriptAccess() {
		return pConfigurationScript;
	}
	
	public ParserRule getConfigurationScriptRule() {
		return getConfigurationScriptAccess().getRule();
	}
	
	//Command:
	//	Declaration | Task;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//REALLiteral ecore::EBigDecimal:
	//	'-'? INT '.' INT;
	public REALLiteralElements getREALLiteralAccess() {
		return pREALLiteral;
	}
	
	public ParserRule getREALLiteralRule() {
		return getREALLiteralAccess().getRule();
	}
	
	//INTLiteral ecore::EInt:
	//	'-'? INT;
	public INTLiteralElements getINTLiteralAccess() {
		return pINTLiteral;
	}
	
	public ParserRule getINTLiteralRule() {
		return getINTLiteralAccess().getRule();
	}
	
	/////////////////////////////////////////////////////
	//// Imports
	/////////////////////////////////////////////////////
	//Import:
	//	EPackageImport | ViatraImport;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//EPackageImport:
	//	"import" "epackage" importedPackage=[ecore::EPackage|STRING];
	public EPackageImportElements getEPackageImportAccess() {
		return pEPackageImport;
	}
	
	public ParserRule getEPackageImportRule() {
		return getEPackageImportAccess().getRule();
	}
	
	//ViatraImport:
	//	"import" "viatra" importedViatra=[viatra::PatternModel|STRING];
	public ViatraImportElements getViatraImportAccess() {
		return pViatraImport;
	}
	
	public ParserRule getViatraImportRule() {
		return getViatraImportAccess().getRule();
	}
	
	/////////////////////////////////////////////////////
	//// Declaration
	/////////////////////////////////////////////////////
	//Declaration:
	//	FileDeclaration
	//	| MetamodelDeclaration
	//	| PartialModelDeclaration
	//	| GraphPatternDeclaration
	//	| ConfigDeclaration
	//	| ScopeDeclaration;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	/////////////////////////////////////////////////////
	//// Files and Folders
	/////////////////////////////////////////////////////
	//FileSpecification:
	//	path=STRING;
	public FileSpecificationElements getFileSpecificationAccess() {
		return pFileSpecification;
	}
	
	public ParserRule getFileSpecificationRule() {
		return getFileSpecificationAccess().getRule();
	}
	
	//FileDeclaration:
	//	'file' name=ID '=' specification=FileSpecification;
	public FileDeclarationElements getFileDeclarationAccess() {
		return pFileDeclaration;
	}
	
	public ParserRule getFileDeclarationRule() {
		return getFileDeclarationAccess().getRule();
	}
	
	//FileReference:
	//	referred=[FileDeclaration];
	public FileReferenceElements getFileReferenceAccess() {
		return pFileReference;
	}
	
	public ParserRule getFileReferenceRule() {
		return getFileReferenceAccess().getRule();
	}
	
	//File:
	//	FileSpecification | FileReference;
	public FileElements getFileAccess() {
		return pFile;
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}
	
	/////////////////////////////////////////////////////
	//// Metamodel
	/////////////////////////////////////////////////////
	//MetamodelSpecification:
	//	'{' entries+=MetamodelEntry (',' entries+=MetamodelEntry)* '}';
	public MetamodelSpecificationElements getMetamodelSpecificationAccess() {
		return pMetamodelSpecification;
	}
	
	public ParserRule getMetamodelSpecificationRule() {
		return getMetamodelSpecificationAccess().getRule();
	}
	
	//MetamodelEntry:
	//	MetamodelElement | AllPackageEntry;
	public MetamodelEntryElements getMetamodelEntryAccess() {
		return pMetamodelEntry;
	}
	
	public ParserRule getMetamodelEntryRule() {
		return getMetamodelEntryAccess().getRule();
	}
	
	//AllPackageEntry:
	//	"package" package=[ecore::EPackage|QualifiedName] ("excluding" '{' exclusion+=MetamodelElement (','
	//	exclusion+=MetamodelElement)* '}')?;
	public AllPackageEntryElements getAllPackageEntryAccess() {
		return pAllPackageEntry;
	}
	
	public ParserRule getAllPackageEntryRule() {
		return getAllPackageEntryAccess().getRule();
	}
	
	//MetamodelElement:
	//	(package=[ecore::EPackage|QualifiedName] '::')? classifier=[ecore::EClassifier] ('.'
	//	feature=[ecore::ENamedElement])?;
	public MetamodelElementElements getMetamodelElementAccess() {
		return pMetamodelElement;
	}
	
	public ParserRule getMetamodelElementRule() {
		return getMetamodelElementAccess().getRule();
	}
	
	//MetamodelDeclaration:
	//	'metamodel' name=ID specification=MetamodelSpecification;
	public MetamodelDeclarationElements getMetamodelDeclarationAccess() {
		return pMetamodelDeclaration;
	}
	
	public ParserRule getMetamodelDeclarationRule() {
		return getMetamodelDeclarationAccess().getRule();
	}
	
	//MetamodelReference:
	//	referred=[MetamodelDeclaration];
	public MetamodelReferenceElements getMetamodelReferenceAccess() {
		return pMetamodelReference;
	}
	
	public ParserRule getMetamodelReferenceRule() {
		return getMetamodelReferenceAccess().getRule();
	}
	
	//Metamodel:
	//	MetamodelReference | MetamodelSpecification;
	public MetamodelElements getMetamodelAccess() {
		return pMetamodel;
	}
	
	public ParserRule getMetamodelRule() {
		return getMetamodelAccess().getRule();
	}
	
	/////////////////////////////////////////////////////
	//// Partial Model
	/////////////////////////////////////////////////////
	//PartialModelSpecification:
	//	'{' entry+=PartialModelEntry (',' entry+=PartialModelEntry)? '}';
	public PartialModelSpecificationElements getPartialModelSpecificationAccess() {
		return pPartialModelSpecification;
	}
	
	public ParserRule getPartialModelSpecificationRule() {
		return getPartialModelSpecificationAccess().getRule();
	}
	
	//PartialModelEntry:
	//	ModelEntry | FolderEntry;
	public PartialModelEntryElements getPartialModelEntryAccess() {
		return pPartialModelEntry;
	}
	
	public ParserRule getPartialModelEntryRule() {
		return getPartialModelEntryAccess().getRule();
	}
	
	//ModelEntry:
	//	path=File;
	public ModelEntryElements getModelEntryAccess() {
		return pModelEntry;
	}
	
	public ParserRule getModelEntryRule() {
		return getModelEntryAccess().getRule();
	}
	
	//FolderEntry:
	//	"folder" path=File ("excluding" "{" exclusion+=ModelEntry ("," exclusion+=ModelEntry)* "}")?;
	public FolderEntryElements getFolderEntryAccess() {
		return pFolderEntry;
	}
	
	public ParserRule getFolderEntryRule() {
		return getFolderEntryAccess().getRule();
	}
	
	//PartialModelDeclaration:
	//	'models' name=ID specification=PartialModelSpecification;
	public PartialModelDeclarationElements getPartialModelDeclarationAccess() {
		return pPartialModelDeclaration;
	}
	
	public ParserRule getPartialModelDeclarationRule() {
		return getPartialModelDeclarationAccess().getRule();
	}
	
	//PartialModelReference:
	//	referred=[PartialModelDeclaration];
	public PartialModelReferenceElements getPartialModelReferenceAccess() {
		return pPartialModelReference;
	}
	
	public ParserRule getPartialModelReferenceRule() {
		return getPartialModelReferenceAccess().getRule();
	}
	
	//PartialModel:
	//	PartialModelSpecification | PartialModelReference;
	public PartialModelElements getPartialModelAccess() {
		return pPartialModel;
	}
	
	public ParserRule getPartialModelRule() {
		return getPartialModelAccess().getRule();
	}
	
	/////////////////////////////////////////////////////
	//// Patterns
	/////////////////////////////////////////////////////
	//PatternSpecification:
	//	'{' entries+=PatternEntry (',' entries+=PatternEntry)* '}';
	public PatternSpecificationElements getPatternSpecificationAccess() {
		return pPatternSpecification;
	}
	
	public ParserRule getPatternSpecificationRule() {
		return getPatternSpecificationAccess().getRule();
	}
	
	//PatternEntry:
	//	PatternElement | AllPatternEntry;
	public PatternEntryElements getPatternEntryAccess() {
		return pPatternEntry;
	}
	
	public ParserRule getPatternEntryRule() {
		return getPatternEntryAccess().getRule();
	}
	
	//AllPatternEntry:
	//	'package' package=[viatra::PatternModel|QualifiedName] ('excluding' '{' exclusuion+=PatternElement (','
	//	exclusuion+=PatternElement)* '}')?;
	public AllPatternEntryElements getAllPatternEntryAccess() {
		return pAllPatternEntry;
	}
	
	public ParserRule getAllPatternEntryRule() {
		return getAllPatternEntryAccess().getRule();
	}
	
	//PatternElement:
	//	(package=[viatra::PatternModel|QualifiedName] '::')? pattern=[viatra::Pattern];
	public PatternElementElements getPatternElementAccess() {
		return pPatternElement;
	}
	
	public ParserRule getPatternElementRule() {
		return getPatternElementAccess().getRule();
	}
	
	//GraphPatternDeclaration:
	//	'constraints' name=ID specification=PatternSpecification;
	public GraphPatternDeclarationElements getGraphPatternDeclarationAccess() {
		return pGraphPatternDeclaration;
	}
	
	public ParserRule getGraphPatternDeclarationRule() {
		return getGraphPatternDeclarationAccess().getRule();
	}
	
	//GraphPatternReference:
	//	referred=[GraphPatternDeclaration];
	public GraphPatternReferenceElements getGraphPatternReferenceAccess() {
		return pGraphPatternReference;
	}
	
	public ParserRule getGraphPatternReferenceRule() {
		return getGraphPatternReferenceAccess().getRule();
	}
	
	//GraphPattern:
	//	GraphPatternReference | PatternSpecification;
	public GraphPatternElements getGraphPatternAccess() {
		return pGraphPattern;
	}
	
	public ParserRule getGraphPatternRule() {
		return getGraphPatternAccess().getRule();
	}
	
	/////////////////////////////////////////////////////
	//// SolverConfig
	/////////////////////////////////////////////////////
	//ConfigSpecification:
	//	{ConfigSpecification} '{' (entries+=ConfigEntry ("," entries+=ConfigEntry)*)?
	//	'}';
	public ConfigSpecificationElements getConfigSpecificationAccess() {
		return pConfigSpecification;
	}
	
	public ParserRule getConfigSpecificationRule() {
		return getConfigSpecificationAccess().getRule();
	}
	
	//ConfigDeclaration:
	//	'config' name=ID specification=ConfigSpecification;
	public ConfigDeclarationElements getConfigDeclarationAccess() {
		return pConfigDeclaration;
	}
	
	public ParserRule getConfigDeclarationRule() {
		return getConfigDeclarationAccess().getRule();
	}
	
	//ConfigEntry:
	//	DocumentationEntry | RuntimeEntry | MemoryEntry | CustomEntry;
	public ConfigEntryElements getConfigEntryAccess() {
		return pConfigEntry;
	}
	
	public ParserRule getConfigEntryRule() {
		return getConfigEntryAccess().getRule();
	}
	
	//DocumentationEntry:
	//	"log-level" '=' level=DocumentLevelSpecification;
	public DocumentationEntryElements getDocumentationEntryAccess() {
		return pDocumentationEntry;
	}
	
	public ParserRule getDocumentationEntryRule() {
		return getDocumentationEntryAccess().getRule();
	}
	
	//enum DocumentLevelSpecification:
	//	none | normal | full;
	public DocumentLevelSpecificationElements getDocumentLevelSpecificationAccess() {
		return eDocumentLevelSpecification;
	}
	
	public EnumRule getDocumentLevelSpecificationRule() {
		return getDocumentLevelSpecificationAccess().getRule();
	}
	
	//RuntimeEntry:
	//	"runtime" "=" millisecLimit=INT;
	public RuntimeEntryElements getRuntimeEntryAccess() {
		return pRuntimeEntry;
	}
	
	public ParserRule getRuntimeEntryRule() {
		return getRuntimeEntryAccess().getRule();
	}
	
	//MemoryEntry:
	//	"memory" "=" megabyteLimit=INT;
	public MemoryEntryElements getMemoryEntryAccess() {
		return pMemoryEntry;
	}
	
	public ParserRule getMemoryEntryRule() {
		return getMemoryEntryAccess().getRule();
	}
	
	//CustomEntry:
	//	key=STRING "=" value=STRING;
	public CustomEntryElements getCustomEntryAccess() {
		return pCustomEntry;
	}
	
	public ParserRule getCustomEntryRule() {
		return getCustomEntryAccess().getRule();
	}
	
	//ConfigReference:
	//	config=[ConfigDeclaration];
	public ConfigReferenceElements getConfigReferenceAccess() {
		return pConfigReference;
	}
	
	public ParserRule getConfigReferenceRule() {
		return getConfigReferenceAccess().getRule();
	}
	
	//Config:
	//	ConfigSpecification | ConfigReference;
	public ConfigElements getConfigAccess() {
		return pConfig;
	}
	
	public ParserRule getConfigRule() {
		return getConfigAccess().getRule();
	}
	
	//enum Solver:
	//	SMTSolver | AlloySolver | ViatraSolver | TPTPSolver;
	public SolverElements getSolverAccess() {
		return eSolver;
	}
	
	public EnumRule getSolverRule() {
		return getSolverAccess().getRule();
	}
	
	//ScopeSpecification:
	//	{ScopeSpecification} '{' (scopes+=TypeScope (',' scopes+=TypeScope)*)?
	//	'}';
	public ScopeSpecificationElements getScopeSpecificationAccess() {
		return pScopeSpecification;
	}
	
	public ParserRule getScopeSpecificationRule() {
		return getScopeSpecificationAccess().getRule();
	}
	
	//TypeScope:
	//	ClassTypeScope | ObjectTypeScope | IntegerTypeScope | RealTypeScope | StringTypeScope;
	public TypeScopeElements getTypeScopeAccess() {
		return pTypeScope;
	}
	
	public ParserRule getTypeScopeRule() {
		return getTypeScopeAccess().getRule();
	}
	
	//ClassTypeScope:
	//	'#' type=ClassReference (setsNew?='+=' | setsSum?='=') (number=ExactNumber | number=IntervallNumber);
	public ClassTypeScopeElements getClassTypeScopeAccess() {
		return pClassTypeScope;
	}
	
	public ParserRule getClassTypeScopeRule() {
		return getClassTypeScopeAccess().getRule();
	}
	
	//ObjectTypeScope:
	//	'#' type=ObjectReference (setsNew?='+=' | setsSum?='=') (number=ExactNumber | number=IntervallNumber);
	public ObjectTypeScopeElements getObjectTypeScopeAccess() {
		return pObjectTypeScope;
	}
	
	public ParserRule getObjectTypeScopeRule() {
		return getObjectTypeScopeAccess().getRule();
	}
	
	//IntegerTypeScope:
	//	'#' type=IntegerReference (setsNew?='+=' | setsSum?='=') (number=ExactNumber | number=IntervallNumber |
	//	number=IntEnumberation);
	public IntegerTypeScopeElements getIntegerTypeScopeAccess() {
		return pIntegerTypeScope;
	}
	
	public ParserRule getIntegerTypeScopeRule() {
		return getIntegerTypeScopeAccess().getRule();
	}
	
	//RealTypeScope:
	//	'#' type=RealReference (setsNew?='+=' | setsSum?='=') (number=ExactNumber | number=IntervallNumber |
	//	number=RealEnumeration);
	public RealTypeScopeElements getRealTypeScopeAccess() {
		return pRealTypeScope;
	}
	
	public ParserRule getRealTypeScopeRule() {
		return getRealTypeScopeAccess().getRule();
	}
	
	//StringTypeScope:
	//	'#' type=StringReference (setsNew?='+=' | setsSum?='=') (number=ExactNumber | number=IntervallNumber |
	//	number=StringEnumeration);
	public StringTypeScopeElements getStringTypeScopeAccess() {
		return pStringTypeScope;
	}
	
	public ParserRule getStringTypeScopeRule() {
		return getStringTypeScopeAccess().getRule();
	}
	
	//TypeReference:
	//	ClassReference | ObjectReference | IntegerReference | RealReference | StringReference;
	public TypeReferenceElements getTypeReferenceAccess() {
		return pTypeReference;
	}
	
	public ParserRule getTypeReferenceRule() {
		return getTypeReferenceAccess().getRule();
	}
	
	//ClassReference:
	//	'<' element=MetamodelElement '>';
	public ClassReferenceElements getClassReferenceAccess() {
		return pClassReference;
	}
	
	public ParserRule getClassReferenceRule() {
		return getClassReferenceAccess().getRule();
	}
	
	//ObjectReference:
	//	{ObjectReference} 'node';
	public ObjectReferenceElements getObjectReferenceAccess() {
		return pObjectReference;
	}
	
	public ParserRule getObjectReferenceRule() {
		return getObjectReferenceAccess().getRule();
	}
	
	//IntegerReference:
	//	{IntegerScope} 'int';
	public IntegerReferenceElements getIntegerReferenceAccess() {
		return pIntegerReference;
	}
	
	public ParserRule getIntegerReferenceRule() {
		return getIntegerReferenceAccess().getRule();
	}
	
	//RealReference:
	//	{RealScope} 'real';
	public RealReferenceElements getRealReferenceAccess() {
		return pRealReference;
	}
	
	public ParserRule getRealReferenceRule() {
		return getRealReferenceAccess().getRule();
	}
	
	//StringReference:
	//	{StringScope} 'string';
	public StringReferenceElements getStringReferenceAccess() {
		return pStringReference;
	}
	
	public ParserRule getStringReferenceRule() {
		return getStringReferenceAccess().getRule();
	}
	
	//NumberSpecification:
	//	ExactNumber | IntervallNumber | IntEnumberation | RealEnumeration | StringEnumeration;
	public NumberSpecificationElements getNumberSpecificationAccess() {
		return pNumberSpecification;
	}
	
	public ParserRule getNumberSpecificationRule() {
		return getNumberSpecificationAccess().getRule();
	}
	
	//ExactNumber:
	//	exactNumber=INT | exactUnlimited?='*';
	public ExactNumberElements getExactNumberAccess() {
		return pExactNumber;
	}
	
	public ParserRule getExactNumberRule() {
		return getExactNumberAccess().getRule();
	}
	
	//IntervallNumber:
	//	min=INT '..' (maxNumber=INT | maxUnlimited?='*');
	public IntervallNumberElements getIntervallNumberAccess() {
		return pIntervallNumber;
	}
	
	public ParserRule getIntervallNumberRule() {
		return getIntervallNumberAccess().getRule();
	}
	
	//IntEnumberation:
	//	{IntEnumberation} '{' (entry+=INTLiteral (',' entry+=INTLiteral)*)? '}';
	public IntEnumberationElements getIntEnumberationAccess() {
		return pIntEnumberation;
	}
	
	public ParserRule getIntEnumberationRule() {
		return getIntEnumberationAccess().getRule();
	}
	
	//RealEnumeration:
	//	{RealEnumeration} '{' (entry+=REALLiteral (',' entry+=REALLiteral)*)? '}';
	public RealEnumerationElements getRealEnumerationAccess() {
		return pRealEnumeration;
	}
	
	public ParserRule getRealEnumerationRule() {
		return getRealEnumerationAccess().getRule();
	}
	
	//StringEnumeration:
	//	{StringEnumeration} '{' (entry+=STRING (',' entry+=STRING)*)? '}';
	public StringEnumerationElements getStringEnumerationAccess() {
		return pStringEnumeration;
	}
	
	public ParserRule getStringEnumerationRule() {
		return getStringEnumerationAccess().getRule();
	}
	
	//ScopeDeclaration:
	//	'scope' name=ID specification=ScopeSpecification;
	public ScopeDeclarationElements getScopeDeclarationAccess() {
		return pScopeDeclaration;
	}
	
	public ParserRule getScopeDeclarationRule() {
		return getScopeDeclarationAccess().getRule();
	}
	
	//ScopeReference:
	//	referred=[ScopeDeclaration];
	public ScopeReferenceElements getScopeReferenceAccess() {
		return pScopeReference;
	}
	
	public ParserRule getScopeReferenceRule() {
		return getScopeReferenceAccess().getRule();
	}
	
	//Scope:
	//	ScopeSpecification | ScopeReference;
	public ScopeElements getScopeAccess() {
		return pScope;
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}
	
	//Task:
	//	GenerationTask /*| CoverageCalculation | ValidationTask*/;
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}
	
	//GenerationTask:
	//	'generate' {GenerationTask} '{' (('metamodel' '=' metamodel=Metamodel)? & ('partial-model' '='
	//	partialModel=PartialModel)? & ('constraints' '=' patterns=GraphPattern)? & ('scope' '=' scope=Scope)? &
	//	(numberSpecified?='number' '=' number=INT)? & (runSpecified?='runs' '=' runs=INT)? & ('solver' '=' solver=Solver)? &
	//	('config' '=' config=Config)? & ('debug' '=' debugFolder=File)? & ('log' '=' targetLogFile=File)? & ('statistics' '='
	//	targetStatisticsFile=File)? & ('output' '=' tagetFolder=File)?) '}';
	public GenerationTaskElements getGenerationTaskAccess() {
		return pGenerationTask;
	}
	
	public ParserRule getGenerationTaskRule() {
		return getGenerationTaskAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
